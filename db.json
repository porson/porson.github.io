{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/post/2017205/slice.png","path":"images/post/2017205/slice.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/post/20170206/get.png","path":"images/post/20170206/get.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/post/20170206/post.png","path":"images/post/20170206/post.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/post/20170206/response.png","path":"images/post/20170206/response.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1492252349184},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1492252349185},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1492252349188},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1492252349186},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1492252349190},{"_id":"themes/next/README.en.md","hash":"f947d9a552da869f0dbef140ceeeb7b040b0f4a4","modified":1492252349282},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1492252349283},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1492252349194},{"_id":"themes/next/gulpfile.coffee","hash":"e549561461642051d195550ec49d793e44ee22a0","modified":1492252349195},{"_id":"themes/next/_config.yml","hash":"892b88225a99247d77613782be6bfb6c266e5713","modified":1492252349192},{"_id":"themes/next/package.json","hash":"48e2352f8e41f2b6bbf55254d10f3192ee206d5a","modified":1492252349281},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1492252349189},{"_id":"source/404/index.md","hash":"50cfde12f19af8cb5d23c4ed2b879b848438d6af","modified":1492252349089},{"_id":"source/_posts/Django基础教程第一章：安装与基本结构.md","hash":"b9c34817eeb92385774ebc2a752368ede9492dc7","modified":1492258658916},{"_id":"source/about/index.md","hash":"b9a1c4c8796e79f2fc6bfb46ba49cce355e0b404","modified":1492252349099},{"_id":"source/_posts/Go语言Web框架Revel的使用.md","hash":"74d119e344894feb08516aedf5bdfdfba2739a08","modified":1492252349090},{"_id":"source/_posts/Go语言append函数操作slice时的一个小坑.md","hash":"8dea47f0f05ebe869db28637504a3504f6797cb0","modified":1492252349090},{"_id":"source/_posts/Go语言自制简易WebServer.md","hash":"e63fb73f32d8a701bda02cfece0d3c66c7a33503","modified":1492252349091},{"_id":"source/_posts/HTTP协议详解.md","hash":"f14888eba5225f9214152be1f1c3ccb523eeeba2","modified":1492252349093},{"_id":"source/_posts/Go语言关于Interface的理解与思考.md","hash":"bba5ae1c0dfffca383ea76ba1ecf231f81d0ab97","modified":1492252349091},{"_id":"source/_posts/MySQL备份与恢复.md","hash":"1974371dd8b4cd848f2f04703c1373d4acd91224","modified":1492252349093},{"_id":"source/_posts/Python-常用加密方法.md","hash":"d5f08aea73664737031595164a2c44ae7af89589","modified":1492252349094},{"_id":"source/_posts/Python线程池的实现.md","hash":"ae4e32a0f7f5c8ca861d645e848880d26e27174a","modified":1492252349095},{"_id":"source/_posts/Ubuntu16-04-安装hexo方法.md","hash":"71b94b9ec44ae3e2ef28ae022b6d879dafca707c","modified":1492252349095},{"_id":"source/_posts/hello-world.md","hash":"7c388b465ac94333b9d77a7fa8016caceb9db91b","modified":1492252349092},{"_id":"source/_posts/抱歉，我又把我的博客拆了.md","hash":"550883a9599d09a96425300559fe16748eab6d98","modified":1492252349096},{"_id":"source/_posts/一个Python调用Shell时遇到的问题.md","hash":"3611e7f285bd8315bb87bd42d6b049dfd7f86a57","modified":1492252349096},{"_id":"source/_posts/文件编码自动转换模块的实现.md","hash":"b99f6b42d28d8fe4d372b10adf78f5ebda672bad","modified":1492252349097},{"_id":"source/_posts/深刻理解Python中的元类（metaclass）.md","hash":"a02165286dfa58a4362005654e19366cec8f8406","modified":1492252349098},{"_id":"source/_posts/解决Python在Windows环境运行时的编码问题.md","hash":"0fadb35d6458bc3c87544ca21a3fac87236963c4","modified":1492252349098},{"_id":"source/tags/index.md","hash":"eb220445ac0252d24953bb7a37f0e7823b9290c0","modified":1492252349099},{"_id":"themes/next/languages/de.yml","hash":"db6a9d669f4b6282cda6c0a2d4e03d3e308a4846","modified":1492252349196},{"_id":"themes/next/languages/default.yml","hash":"fe00529a94bb2550194a31d178f5810b45014ab6","modified":1492252349197},{"_id":"themes/next/languages/en.yml","hash":"d02acdce503c86fbb01920ad22d31ec56fc285f1","modified":1492252349198},{"_id":"themes/next/languages/fr-FR.yml","hash":"91cf55b9d75879e72c8008d2659fe2ea993a4cca","modified":1492252349199},{"_id":"themes/next/languages/id.yml","hash":"d8b9dc017da0be7f71fda1cacd8064cbc38963b9","modified":1492252349200},{"_id":"themes/next/languages/ja.yml","hash":"bc89436a2a015ef72f43f265e56e37d94e73c0cd","modified":1492252349200},{"_id":"themes/next/languages/ko.yml","hash":"c59676f2af80c3c594c34c4a0fcbf65fd8864ff3","modified":1492252349203},{"_id":"themes/next/languages/pt-BR.yml","hash":"4b91f96b07e05705b28964df7460466c9b522e2c","modified":1492252349205},{"_id":"themes/next/languages/pt.yml","hash":"f364905121a816c9797acce07c0a4f248965b29a","modified":1492252349207},{"_id":"themes/next/languages/ru.yml","hash":"402e676252ab1fc4522257a578738cb9536eb077","modified":1492252349208},{"_id":"themes/next/languages/zh-Hans.yml","hash":"439c16c744b1596f24d9e0b4e230c4d3c93b7d85","modified":1492252349208},{"_id":"themes/next/languages/zh-hk.yml","hash":"a59f3f3114f5eb4d170a76da4359307e8f5159a7","modified":1492252349209},{"_id":"themes/next/languages/zh-tw.yml","hash":"18da1324d2212faca9a6e5e6ce98b419c86d4b0c","modified":1492252349211},{"_id":"themes/next/layout/_layout.swig","hash":"24de463d28bacbf2a28c34fecf082980f7f33a12","modified":1492252349217},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1492252349275},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1492252349276},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1492252349278},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1492252349277},{"_id":"themes/next/layout/schedule.swig","hash":"595013860078799d455af4965b3a7c5c4fd3923c","modified":1492252349279},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1492252349278},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1492252349280},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1492252349284},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1492252349454},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1492252349456},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1492252349455},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492252349363},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1492252349215},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"6d40652784585d263c37b8a3723e43e04b926ca7","modified":1492252349218},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1492252349216},{"_id":"themes/next/layout/_macro/post.swig","hash":"216907a1348317114ccb90fecc752b8b7255b15b","modified":1492252349220},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1492252349221},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a42851e17d8961e5cae8b588d95a4a5456964972","modified":1492252349222},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1492252349223},{"_id":"themes/next/layout/_partials/comments.swig","hash":"09da002fbeb0fe2ac3f180ecf77bce568ea989ca","modified":1492252349225},{"_id":"themes/next/layout/_partials/footer.swig","hash":"d069504572a79a1b182a5aa885b1e697211967fb","modified":1492252349226},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1492252349226},{"_id":"themes/next/layout/_partials/head.swig","hash":"740684ef2b6e56183529387882042612e904bc8d","modified":1492252349227},{"_id":"themes/next/layout/_partials/header.swig","hash":"8985089c950d6df0efab9cd549a6b9ee50708ee2","modified":1492252349231},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"dfbb6e9692333166aa78231ad12b2a40c153cbcb","modified":1492252349234},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1492252349235},{"_id":"themes/next/layout/_partials/search.swig","hash":"952b7b8d9ce2c81d4002a9dc2331f1e710f99616","modified":1492252349236},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1492252349248},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1492252349247},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1492252349246},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e9beddda9758d8739c41fc8c67b2e72fc29c1244","modified":1492252349274},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1492252349286},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1492252349285},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1492252349289},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1492252349288},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1492252349290},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1492252349362},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1492252349364},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1492252349372},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1492252349372},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1492252349373},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1492252349373},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1492252349374},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1492252349375},{"_id":"themes/next/source/images/favicon.png","hash":"152cc0287d8055664988518f8db3ecd9841e820e","modified":1492252349376},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1492252349375},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1492252349376},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1492252349377},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1492252349381},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1492252349381},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1492252349382},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492252349250},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492252349251},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492252349344},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492252349345},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492252349344},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492252349361},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492252349360},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1492252349213},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"bb2c3a926bb7f8fea54d424882b25d93dfde7ae6","modified":1492252349214},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1492252349229},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1492252349230},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1492252349238},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1492252349239},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1492252349240},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1492252349242},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1492252349243},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1492252349244},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1492252349244},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1492252349252},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1492252349249},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"188423f7df0eb8c99a03cb6741384415651c4665","modified":1492252349253},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"4f9efb15c9aaa016ac78d9f8aa2caefea87869df","modified":1492252349262},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1492252349268},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f592adff22628b271ec9657b080cf6b9cc200615","modified":1492252349269},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1492252349271},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1492252349273},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1492252349272},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1492252349343},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1492252349345},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1492252349343},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1492252349361},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c666e352c3b8e4ad0a16cc757b08f44ef9172182","modified":1492252349362},{"_id":"themes/next/source/css/_variables/base.styl","hash":"8b08a5ce4222aa731b180a12127bd0e52d12ede8","modified":1492252349360},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84bdc8a4fe127849a5c99bdefe1d0b65ee1a4a0a","modified":1492252349383},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1492252349382},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1492252349383},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1492252349384},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1492252349385},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1492252349384},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1492252349387},{"_id":"themes/next/source/js/src/utils.js","hash":"e34f83848883732ddd7a34a3e3ed2a293f0f76a7","modified":1492252349388},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1492252349389},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1492252349393},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1492252349408},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1492252349411},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1492252349411},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1492252349409},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1492252349393},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1492252349394},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"8868275e8b6340c87a81c69a54ed138d11fb3c3e","modified":1492252349412},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1492252349412},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1492252349413},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1492252349428},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1492252349413},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1492252349429},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1492252349433},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1492252349435},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1492252349442},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1492252349434},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1492252349438},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1492252349436},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1492252349447},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1492252349446},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1492252349450},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1492252349451},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1492252349452},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1492252349430},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1492252349255},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1492252349257},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1492252349256},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1492252349258},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1492252349260},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1492252349259},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1492252349261},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"e4a13e8cd19762ef3aea0e59dfae8b3c1f251f11","modified":1492252349264},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1492252349264},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1492252349265},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1492252349266},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"f40a697fd046415924a142eec1effad70f3cb187","modified":1492252349267},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1492252349339},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1492252349293},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1492252349294},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1492252349295},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1492252349294},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1492252349311},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1492252349330},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1492252349340},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1492252349341},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1492252349341},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1492252349341},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1492252349342},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1492252349347},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1492252349346},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1492252349347},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1492252349348},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1492252349348},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1492252349349},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1492252349350},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1492252349352},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1492252349353},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1492252349354},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1492252349353},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1492252349355},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"34acb45007229b299951ce35d8eef642ea16fbe9","modified":1492252349357},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"221d3dbc04ff6c211ba9382397c4977e9f493153","modified":1492252349357},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"173f3aa31c41782591b7abeadd4f88f68d59b042","modified":1492252349358},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1492252349358},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1492252349359},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"1be4ef3f97f329e2531bfd2dfdc40c0e46df35c8","modified":1492252349359},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c2390263a298a2b78c5f941e6827c13f02e1ee85","modified":1492252349386},{"_id":"themes/next/source/images/post/2017205/slice.png","hash":"6f248d452b3a557465ea9441b0d00392bcf14540","modified":1492252349380},{"_id":"themes/next/source/images/post/20170206/get.png","hash":"007dad619ba656512f5e6a7f4fad8a1cd7e0fb49","modified":1492252349378},{"_id":"themes/next/source/images/post/20170206/post.png","hash":"680e57b610aea0a36f744e0111736e352eb3bea9","modified":1492252349378},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1492252349410},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1492252349394},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1492252349410},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1492252349395},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1492252349396},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1492252349397},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1492252349396},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1492252349400},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1492252349407},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1492252349406},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1492252349407},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"a02674d823c7b577d38c3cdb91953993b6e4b3a0","modified":1492252349414},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1492252349415},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"3c1d63dd1176c77f9f4cdb1616fbb08c31b9822f","modified":1492252349415},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1492252349444},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1492252349443},{"_id":"themes/next/source/images/post/20170206/response.png","hash":"b0ec13880fb59a9a1f8b08e4d64e9eda086ddf97","modified":1492252349379},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1492252349426},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1492252349416},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1492252349421},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1492252349422},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1492252349449},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1492252349297},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1492252349306},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1492252349307},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1492252349309},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1492252349308},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1492252349310},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1492252349298},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1492252349299},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1492252349300},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1492252349301},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1492252349303},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1492252349306},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1492252349299},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"cd2def16d31feb234be27dcdce2a919f70cc6919","modified":1492252349304},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1492252349326},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1492252349325},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1492252349325},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1492252349326},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1492252349327},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1492252349328},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1492252349328},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1492252349329},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1492252349329},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"0d9a4ae2e4ab418453e0f81b8fb1ad4b856f91d4","modified":1492252349312},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1492252349315},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1492252349315},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1492252349313},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1492252349316},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"e28c805011f65b54060f03be90ec5a23714c4985","modified":1492252349319},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1492252349321},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"74e9989a10fc682388cbd25ff7df0d7d4025fb8c","modified":1492252349320},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1492252349322},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1492252349324},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1492252349323},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"011d5828b4972b2df0b429794b4466ba5bc1b49e","modified":1492252349324},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1492252349331},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1492252349331},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1492252349332},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1492252349331},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"c8a05ce90784db9744c22fab22019eb637df1f2f","modified":1492252349332},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1492252349333},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1492252349334},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1492252349334},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"3b1aabbab57b0b1fafa311feb1212f59e78e7928","modified":1492252349333},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"eb4ede7d7446d8a2f2ddeef3b17f497a6ad30756","modified":1492252349338},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1492252349335},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1492252349337},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"dc944a01dd59f5ed2d44bb22fdb21fc3f455948f","modified":1492252349339},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1492252349351},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1492252349350},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1492252349356},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1492252349402},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1492252349401},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1492252349400},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1492252349401},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1492252349402},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1492252349405},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1492252349419},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1492252349392},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1492252349418},{"_id":"themes/next/source/images/avatar.gif","hash":"3e15387d5ac9566ee9cd303aaf01ffceaab79bc3","modified":1492252349371}],"Category":[],"Data":[],"Page":[{"title":"ERROR 404","date":"2017-02-03T17:14:51.000Z","type":404,"_content":"<center>\n<h2>您要查看的文章已经迁移或丢失，如有问题请联系我。</h2>\nporson94@yahoo.com\n</center>\n","source":"404/index.md","raw":"---\ntitle: ERROR 404\ndate: 2017-02-04 01:14:51\ntype: 404\n---\n<center>\n<h2>您要查看的文章已经迁移或丢失，如有问题请联系我。</h2>\nporson94@yahoo.com\n</center>\n","updated":"2017-04-15T10:32:29.089Z","path":"404/index.html","comments":1,"layout":"page","_id":"cj1j873b200007koeofm5akue","content":"<center><br><h2>您要查看的文章已经迁移或丢失，如有问题请联系我。</h2><br>porson94@yahoo.com<br></center>\n","excerpt":"","more":"<center><br><h2>您要查看的文章已经迁移或丢失，如有问题请联系我。</h2><br>porson94@yahoo.com<br></center>\n"},{"type":"about","_content":"<center>\n李鹏翔 | Porson\nporson94@yahoo.com\n<br>\nMySQL DBA，\nLinux使用者及爱好者。\n伪全栈工程师，\n会点Python，会点Go。\n\n<hr>\n希望这里能能帮助到你\n</center>\n\n","source":"about/index.md","raw":"---\ntype: about\n---\n<center>\n李鹏翔 | Porson\nporson94@yahoo.com\n<br>\nMySQL DBA，\nLinux使用者及爱好者。\n伪全栈工程师，\n会点Python，会点Go。\n\n<hr>\n希望这里能能帮助到你\n</center>\n\n","date":"2017-04-15T10:32:29.099Z","updated":"2017-04-15T10:32:29.099Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cj1j873bi00027koezyso5v0c","content":"<center><br>李鹏翔 | Porson<br>porson94@yahoo.com<br><br><br>MySQL DBA，<br>Linux使用者及爱好者。<br>伪全栈工程师，<br>会点Python，会点Go。<br><br><hr><br>希望这里能能帮助到你<br></center>\n\n","excerpt":"","more":"<center><br>李鹏翔 | Porson<br>porson94@yahoo.com<br><br><br>MySQL DBA，<br>Linux使用者及爱好者。<br>伪全栈工程师，<br>会点Python，会点Go。<br><br><hr><br>希望这里能能帮助到你<br></center>\n\n"},{"title":"标签","date":"2017-02-03T18:53:58.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-02-04 02:53:58\ntype: tags\n---\n","updated":"2017-04-15T10:32:29.099Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj1j873jw001k7koej8lc7z8k"}],"Post":[{"title":"Go语言Web框架Revel初体验","date":"2017-02-04T09:01:30.000Z","_content":"\n毕业设计为了给自己点压力就提交了一个用go语言做的题目，然后很顺利的通过了。导师很欣慰的跟我说：“孩子你真不错，好好做，努力加油。”之后每想起这件事就哭得跟个泪人儿似的。\n\n这个项目答辩后会开源在我的Github上，如果有兴趣的同学大家可以拿来练练手。\n\n<!-- more -->\n\n### 什么是Revel\n\nRevel官网给予的说明是：一个高生产力的 Go 语言 Web 框架。\n\n根据Web Framework Benchmarks测评显示，Revel目前性能排名第八的Web框架。注意，是**全语言全框架**性能排名第八。\n\n[查看测试报告](http://www.techempower.com/benchmarks/#section=data-r8)\n\n### Revel特性\n\n#### 热编译\n\n现在不能热编译的框架还叫框架？\n\n> 编辑, 保存, 和 刷新时，Revel自动编译代码和模板，如果代码编译错误，会给出一个 [错误提示](http://www.gorevel.cn/docs/img/CompilationError.png)，同时捕捉 [运行期错误](http://www.gorevel.cn/docs/img/Panic.png)。\n\n#### 全栈功能\n\n~~特别适合我这种全栈工程师~~\n\n> Revel 支持： [路由](http://www.gorevel.cn/docs/manual/routing.html), [参数解析](http://www.gorevel.cn/docs/manual/binding.html), [验证](http://www.gorevel.cn/docs/manual/validation.html),[session/flash](http://www.gorevel.cn/docs/manual/sessionflash.html), [模板](http://www.gorevel.cn/docs/manual/templates.html), [缓存](http://www.gorevel.cn/docs/manual/cache.html), [计划任务](http://www.gorevel.cn/docs/manual/jobs.html), [测试](http://www.gorevel.cn/docs/manual/testing.html), [国际化](http://www.gorevel.cn/docs/manual/i18n-messages.html) 等功能。\n\n#### 框架设计\n\nRevel秉持模块化无状态的同步设计，所以拓展性高，灵活性强。\n\n熟悉Python的同学肯定使用过Django，就我目前的开发感觉来看，转过来用的非常舒服，理解起来没有障碍。\n\n\n\n---\n\n### 安装\n\n说了这么多，到底怎么样使用呢？\n\nGo与其他语言不同，Go语言本身就集成了相当多的工具，所以无论是第三方包的下载还是安装，都是非常灵活方便的。~~除了需要翻墙~~\n\n#### 一、科学上网\n\n是的，这是第一步，没有这一步你连包都下不全，有一部分的代码在google的服务器上。\n\n但是你要是说就是不想翻墙，或者就是不会怎么办？\n\n#### 二、第三方包下载工具\n\n[Golang中国第三方包下载工具](http://www.golangtc.com/download/package)\n\n上面的说明写的十分详细简单，我也就不赘述了。\n\n#### 三、开始安装\n\n安装Revel需要安装两个包\n\n1. github.com/revel/revel\n2. github.com/revel/cmd/revel\n\n第一个是Revel本体，第二个是命令行工具。\n\n不过这两个包只有第一个需要翻墙。\n\n\n\n---\n\n在第三方包下载工具当中输入包名\n\n```shell\ngithub.com/revel/revel\n```\n\n然后等工具下载完后下载到本地，解压所有文件到你的GOPATH路径下的src目录下。\n\n然后在命令行中输入\n\n```shell\ngo install github.com/revel/revel\n```\n\n等待成功后就可以安装命令行工具\n\n```shell\ngo get github.com/revel/cmd/revel\n```\n\n\n\n### 完成\n\n接下来就是按照官网上的指示创建Revel应用即可。\n\n非常简单，初学者可能会卡在科学上网上。\n\n[Revel中文站](http://www.gorevel.cn/)\n\n","source":"_posts/Go语言Web框架Revel的使用.md","raw":"---\ntitle: Go语言Web框架Revel初体验\ndate: 2017-02-04 17:01:30\ntags: \n    - Golang\n    - Revel\n---\n\n毕业设计为了给自己点压力就提交了一个用go语言做的题目，然后很顺利的通过了。导师很欣慰的跟我说：“孩子你真不错，好好做，努力加油。”之后每想起这件事就哭得跟个泪人儿似的。\n\n这个项目答辩后会开源在我的Github上，如果有兴趣的同学大家可以拿来练练手。\n\n<!-- more -->\n\n### 什么是Revel\n\nRevel官网给予的说明是：一个高生产力的 Go 语言 Web 框架。\n\n根据Web Framework Benchmarks测评显示，Revel目前性能排名第八的Web框架。注意，是**全语言全框架**性能排名第八。\n\n[查看测试报告](http://www.techempower.com/benchmarks/#section=data-r8)\n\n### Revel特性\n\n#### 热编译\n\n现在不能热编译的框架还叫框架？\n\n> 编辑, 保存, 和 刷新时，Revel自动编译代码和模板，如果代码编译错误，会给出一个 [错误提示](http://www.gorevel.cn/docs/img/CompilationError.png)，同时捕捉 [运行期错误](http://www.gorevel.cn/docs/img/Panic.png)。\n\n#### 全栈功能\n\n~~特别适合我这种全栈工程师~~\n\n> Revel 支持： [路由](http://www.gorevel.cn/docs/manual/routing.html), [参数解析](http://www.gorevel.cn/docs/manual/binding.html), [验证](http://www.gorevel.cn/docs/manual/validation.html),[session/flash](http://www.gorevel.cn/docs/manual/sessionflash.html), [模板](http://www.gorevel.cn/docs/manual/templates.html), [缓存](http://www.gorevel.cn/docs/manual/cache.html), [计划任务](http://www.gorevel.cn/docs/manual/jobs.html), [测试](http://www.gorevel.cn/docs/manual/testing.html), [国际化](http://www.gorevel.cn/docs/manual/i18n-messages.html) 等功能。\n\n#### 框架设计\n\nRevel秉持模块化无状态的同步设计，所以拓展性高，灵活性强。\n\n熟悉Python的同学肯定使用过Django，就我目前的开发感觉来看，转过来用的非常舒服，理解起来没有障碍。\n\n\n\n---\n\n### 安装\n\n说了这么多，到底怎么样使用呢？\n\nGo与其他语言不同，Go语言本身就集成了相当多的工具，所以无论是第三方包的下载还是安装，都是非常灵活方便的。~~除了需要翻墙~~\n\n#### 一、科学上网\n\n是的，这是第一步，没有这一步你连包都下不全，有一部分的代码在google的服务器上。\n\n但是你要是说就是不想翻墙，或者就是不会怎么办？\n\n#### 二、第三方包下载工具\n\n[Golang中国第三方包下载工具](http://www.golangtc.com/download/package)\n\n上面的说明写的十分详细简单，我也就不赘述了。\n\n#### 三、开始安装\n\n安装Revel需要安装两个包\n\n1. github.com/revel/revel\n2. github.com/revel/cmd/revel\n\n第一个是Revel本体，第二个是命令行工具。\n\n不过这两个包只有第一个需要翻墙。\n\n\n\n---\n\n在第三方包下载工具当中输入包名\n\n```shell\ngithub.com/revel/revel\n```\n\n然后等工具下载完后下载到本地，解压所有文件到你的GOPATH路径下的src目录下。\n\n然后在命令行中输入\n\n```shell\ngo install github.com/revel/revel\n```\n\n等待成功后就可以安装命令行工具\n\n```shell\ngo get github.com/revel/cmd/revel\n```\n\n\n\n### 完成\n\n接下来就是按照官网上的指示创建Revel应用即可。\n\n非常简单，初学者可能会卡在科学上网上。\n\n[Revel中文站](http://www.gorevel.cn/)\n\n","slug":"Go语言Web框架Revel的使用","published":1,"updated":"2017-04-15T10:32:29.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1j873b500017koer64ftqwg","content":"<p>毕业设计为了给自己点压力就提交了一个用go语言做的题目，然后很顺利的通过了。导师很欣慰的跟我说：“孩子你真不错，好好做，努力加油。”之后每想起这件事就哭得跟个泪人儿似的。</p>\n<p>这个项目答辩后会开源在我的Github上，如果有兴趣的同学大家可以拿来练练手。</p>\n<a id=\"more\"></a>\n<h3 id=\"什么是Revel\"><a href=\"#什么是Revel\" class=\"headerlink\" title=\"什么是Revel\"></a>什么是Revel</h3><p>Revel官网给予的说明是：一个高生产力的 Go 语言 Web 框架。</p>\n<p>根据Web Framework Benchmarks测评显示，Revel目前性能排名第八的Web框架。注意，是<strong>全语言全框架</strong>性能排名第八。</p>\n<p><a href=\"http://www.techempower.com/benchmarks/#section=data-r8\" target=\"_blank\" rel=\"external\">查看测试报告</a></p>\n<h3 id=\"Revel特性\"><a href=\"#Revel特性\" class=\"headerlink\" title=\"Revel特性\"></a>Revel特性</h3><h4 id=\"热编译\"><a href=\"#热编译\" class=\"headerlink\" title=\"热编译\"></a>热编译</h4><p>现在不能热编译的框架还叫框架？</p>\n<blockquote>\n<p>编辑, 保存, 和 刷新时，Revel自动编译代码和模板，如果代码编译错误，会给出一个 <a href=\"http://www.gorevel.cn/docs/img/CompilationError.png\" target=\"_blank\" rel=\"external\">错误提示</a>，同时捕捉 <a href=\"http://www.gorevel.cn/docs/img/Panic.png\" target=\"_blank\" rel=\"external\">运行期错误</a>。</p>\n</blockquote>\n<h4 id=\"全栈功能\"><a href=\"#全栈功能\" class=\"headerlink\" title=\"全栈功能\"></a>全栈功能</h4><p><del>特别适合我这种全栈工程师</del></p>\n<blockquote>\n<p>Revel 支持： <a href=\"http://www.gorevel.cn/docs/manual/routing.html\" target=\"_blank\" rel=\"external\">路由</a>, <a href=\"http://www.gorevel.cn/docs/manual/binding.html\" target=\"_blank\" rel=\"external\">参数解析</a>, <a href=\"http://www.gorevel.cn/docs/manual/validation.html\" target=\"_blank\" rel=\"external\">验证</a>,<a href=\"http://www.gorevel.cn/docs/manual/sessionflash.html\" target=\"_blank\" rel=\"external\">session/flash</a>, <a href=\"http://www.gorevel.cn/docs/manual/templates.html\" target=\"_blank\" rel=\"external\">模板</a>, <a href=\"http://www.gorevel.cn/docs/manual/cache.html\" target=\"_blank\" rel=\"external\">缓存</a>, <a href=\"http://www.gorevel.cn/docs/manual/jobs.html\" target=\"_blank\" rel=\"external\">计划任务</a>, <a href=\"http://www.gorevel.cn/docs/manual/testing.html\" target=\"_blank\" rel=\"external\">测试</a>, <a href=\"http://www.gorevel.cn/docs/manual/i18n-messages.html\" target=\"_blank\" rel=\"external\">国际化</a> 等功能。</p>\n</blockquote>\n<h4 id=\"框架设计\"><a href=\"#框架设计\" class=\"headerlink\" title=\"框架设计\"></a>框架设计</h4><p>Revel秉持模块化无状态的同步设计，所以拓展性高，灵活性强。</p>\n<p>熟悉Python的同学肯定使用过Django，就我目前的开发感觉来看，转过来用的非常舒服，理解起来没有障碍。</p>\n<hr>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>说了这么多，到底怎么样使用呢？</p>\n<p>Go与其他语言不同，Go语言本身就集成了相当多的工具，所以无论是第三方包的下载还是安装，都是非常灵活方便的。<del>除了需要翻墙</del></p>\n<h4 id=\"一、科学上网\"><a href=\"#一、科学上网\" class=\"headerlink\" title=\"一、科学上网\"></a>一、科学上网</h4><p>是的，这是第一步，没有这一步你连包都下不全，有一部分的代码在google的服务器上。</p>\n<p>但是你要是说就是不想翻墙，或者就是不会怎么办？</p>\n<h4 id=\"二、第三方包下载工具\"><a href=\"#二、第三方包下载工具\" class=\"headerlink\" title=\"二、第三方包下载工具\"></a>二、第三方包下载工具</h4><p><a href=\"http://www.golangtc.com/download/package\" target=\"_blank\" rel=\"external\">Golang中国第三方包下载工具</a></p>\n<p>上面的说明写的十分详细简单，我也就不赘述了。</p>\n<h4 id=\"三、开始安装\"><a href=\"#三、开始安装\" class=\"headerlink\" title=\"三、开始安装\"></a>三、开始安装</h4><p>安装Revel需要安装两个包</p>\n<ol>\n<li>github.com/revel/revel</li>\n<li>github.com/revel/cmd/revel</li>\n</ol>\n<p>第一个是Revel本体，第二个是命令行工具。</p>\n<p>不过这两个包只有第一个需要翻墙。</p>\n<hr>\n<p>在第三方包下载工具当中输入包名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">github.com/revel/revel</div></pre></td></tr></table></figure>\n<p>然后等工具下载完后下载到本地，解压所有文件到你的GOPATH路径下的src目录下。</p>\n<p>然后在命令行中输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">go install github.com/revel/revel</div></pre></td></tr></table></figure>\n<p>等待成功后就可以安装命令行工具</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">go get github.com/revel/cmd/revel</div></pre></td></tr></table></figure>\n<h3 id=\"完成\"><a href=\"#完成\" class=\"headerlink\" title=\"完成\"></a>完成</h3><p>接下来就是按照官网上的指示创建Revel应用即可。</p>\n<p>非常简单，初学者可能会卡在科学上网上。</p>\n<p><a href=\"http://www.gorevel.cn/\" target=\"_blank\" rel=\"external\">Revel中文站</a></p>\n","excerpt":"<p>毕业设计为了给自己点压力就提交了一个用go语言做的题目，然后很顺利的通过了。导师很欣慰的跟我说：“孩子你真不错，好好做，努力加油。”之后每想起这件事就哭得跟个泪人儿似的。</p>\n<p>这个项目答辩后会开源在我的Github上，如果有兴趣的同学大家可以拿来练练手。</p>","more":"<h3 id=\"什么是Revel\"><a href=\"#什么是Revel\" class=\"headerlink\" title=\"什么是Revel\"></a>什么是Revel</h3><p>Revel官网给予的说明是：一个高生产力的 Go 语言 Web 框架。</p>\n<p>根据Web Framework Benchmarks测评显示，Revel目前性能排名第八的Web框架。注意，是<strong>全语言全框架</strong>性能排名第八。</p>\n<p><a href=\"http://www.techempower.com/benchmarks/#section=data-r8\">查看测试报告</a></p>\n<h3 id=\"Revel特性\"><a href=\"#Revel特性\" class=\"headerlink\" title=\"Revel特性\"></a>Revel特性</h3><h4 id=\"热编译\"><a href=\"#热编译\" class=\"headerlink\" title=\"热编译\"></a>热编译</h4><p>现在不能热编译的框架还叫框架？</p>\n<blockquote>\n<p>编辑, 保存, 和 刷新时，Revel自动编译代码和模板，如果代码编译错误，会给出一个 <a href=\"http://www.gorevel.cn/docs/img/CompilationError.png\">错误提示</a>，同时捕捉 <a href=\"http://www.gorevel.cn/docs/img/Panic.png\">运行期错误</a>。</p>\n</blockquote>\n<h4 id=\"全栈功能\"><a href=\"#全栈功能\" class=\"headerlink\" title=\"全栈功能\"></a>全栈功能</h4><p><del>特别适合我这种全栈工程师</del></p>\n<blockquote>\n<p>Revel 支持： <a href=\"http://www.gorevel.cn/docs/manual/routing.html\">路由</a>, <a href=\"http://www.gorevel.cn/docs/manual/binding.html\">参数解析</a>, <a href=\"http://www.gorevel.cn/docs/manual/validation.html\">验证</a>,<a href=\"http://www.gorevel.cn/docs/manual/sessionflash.html\">session/flash</a>, <a href=\"http://www.gorevel.cn/docs/manual/templates.html\">模板</a>, <a href=\"http://www.gorevel.cn/docs/manual/cache.html\">缓存</a>, <a href=\"http://www.gorevel.cn/docs/manual/jobs.html\">计划任务</a>, <a href=\"http://www.gorevel.cn/docs/manual/testing.html\">测试</a>, <a href=\"http://www.gorevel.cn/docs/manual/i18n-messages.html\">国际化</a> 等功能。</p>\n</blockquote>\n<h4 id=\"框架设计\"><a href=\"#框架设计\" class=\"headerlink\" title=\"框架设计\"></a>框架设计</h4><p>Revel秉持模块化无状态的同步设计，所以拓展性高，灵活性强。</p>\n<p>熟悉Python的同学肯定使用过Django，就我目前的开发感觉来看，转过来用的非常舒服，理解起来没有障碍。</p>\n<hr>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>说了这么多，到底怎么样使用呢？</p>\n<p>Go与其他语言不同，Go语言本身就集成了相当多的工具，所以无论是第三方包的下载还是安装，都是非常灵活方便的。<del>除了需要翻墙</del></p>\n<h4 id=\"一、科学上网\"><a href=\"#一、科学上网\" class=\"headerlink\" title=\"一、科学上网\"></a>一、科学上网</h4><p>是的，这是第一步，没有这一步你连包都下不全，有一部分的代码在google的服务器上。</p>\n<p>但是你要是说就是不想翻墙，或者就是不会怎么办？</p>\n<h4 id=\"二、第三方包下载工具\"><a href=\"#二、第三方包下载工具\" class=\"headerlink\" title=\"二、第三方包下载工具\"></a>二、第三方包下载工具</h4><p><a href=\"http://www.golangtc.com/download/package\">Golang中国第三方包下载工具</a></p>\n<p>上面的说明写的十分详细简单，我也就不赘述了。</p>\n<h4 id=\"三、开始安装\"><a href=\"#三、开始安装\" class=\"headerlink\" title=\"三、开始安装\"></a>三、开始安装</h4><p>安装Revel需要安装两个包</p>\n<ol>\n<li>github.com/revel/revel</li>\n<li>github.com/revel/cmd/revel</li>\n</ol>\n<p>第一个是Revel本体，第二个是命令行工具。</p>\n<p>不过这两个包只有第一个需要翻墙。</p>\n<hr>\n<p>在第三方包下载工具当中输入包名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">github.com/revel/revel</div></pre></td></tr></table></figure>\n<p>然后等工具下载完后下载到本地，解压所有文件到你的GOPATH路径下的src目录下。</p>\n<p>然后在命令行中输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">go install github.com/revel/revel</div></pre></td></tr></table></figure>\n<p>等待成功后就可以安装命令行工具</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">go get github.com/revel/cmd/revel</div></pre></td></tr></table></figure>\n<h3 id=\"完成\"><a href=\"#完成\" class=\"headerlink\" title=\"完成\"></a>完成</h3><p>接下来就是按照官网上的指示创建Revel应用即可。</p>\n<p>非常简单，初学者可能会卡在科学上网上。</p>\n<p><a href=\"http://www.gorevel.cn/\">Revel中文站</a></p>"},{"title":"Go语言append函数操作slice时的一个小坑","date":"2017-02-05T07:56:37.000Z","_content":"{% cq %}在学习Go语言的slice时发现了这样的一个问题，当对slice进行追加的时候，数据会被追加回原数组当中。{% endcq %}\n\n<!-- more -->\n\n### 问题重现\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\n\tArray_list_1 := [10]byte{'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'}\n\tArray_list_2 := [10]byte{'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'}\n\n\tslice_list_1 := Array_list_1[2:5]\n\tslice_list_2 := Array_list_1[3:]\n\tb := append(slice_list_1, 'p')\n\n\tfmt.Println(Array_list_1)\n\tfmt.Println(Array_list_2)\n\tfmt.Println(slice_list_1)\n\tfmt.Println(slice_list_2)\n\tfmt.Println(b)\n}\n\n```\n\n输出的结果是\n\n```reStructuredText\n[97 98 99 100 101 112 103 104 105 106]\n[97 98 99 100 101 102 103 104 105 106]\n[99 100 101]\n[100 101 112 103 104 105 106]\n[99 100 101 112]\n\nProcess finished with exit code 0\n```\n\n我创建了两个相同的队列，然后对他们当中的一个（Array_list_1）进行切片，然后对其中一个切片进行追加，结果发现对切片进行追加后，原数组的内容也发生了改变，由102变为了112。\n\n### 原理解析\n\n![](/images/post/2017205/slice.png)\n\n查阅资料后得知，**slice是引用类型**，在内存中并没有属于自己的内存空间，而是**通过指针指向进行切片的队列**。由于队列分配的内存空间是连续的，所以如果slice的最后一个元素不是list的最后一个元素，那么在append的时候，**新追加的元素就会覆盖掉原数组的元素**。而由于slice是指针组织的，**所以这个list的所有slice都会被影响**。如果切片末尾元素就是队列的末尾元素，返回的 slice 数组指针将指向这个空间，而原数组的内容将保持不变，其它引用此数组的 slice 则不受影响。\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\n\tArray_list_1 := [3]byte{'a', 'b', 'c'}\n\tArray_list_2 := [3]byte{'a', 'b', 'c'}\n\n\tslice_list_1 := Array_list_1[:]\n\tslice_list_2 := Array_list_1[:]\n\tb := append(slice_list_1, 'p')\n\n\tfmt.Println(Array_list_1)\n\tfmt.Println(Array_list_2)\n\tfmt.Println(slice_list_1)\n\tfmt.Println(slice_list_2)\n\tfmt.Println(b)\n}\n\n```\n\n输出结果\n\n```reStructuredText\n[97 98 99]\n[97 98 99]\n[97 98 99]\n[97 98 99]\n[97 98 99 112]\n\nProcess finished with exit code 0\n\n```\n\n由此拓展可以知道，所有对slice的修改都会对原list产生修改。所以使用的时候一定要小心。\n\n\n\n#### 补充，实际应用当中的“意外”\n\n上边我们一直在说，Slice是引用类型，指向的都是内存中的同一块内存，不过在实际应用中，有的时候却会发生“意外”，这种情况只有在像切片append元素的时候出现，Slice的处理机制是这样的，当Slice的容量还有空闲的时候，append进来的元素会直接使用空闲的容量空间，但是一旦append进来的元素个数超过了原来指定容量值的时候，内存管理器就是重新开辟一个更大的内存空间，用于存储多出来的元素，并且会将原来的元素复制一份，放到这块新开辟的内存空间。\n\n```go\na := []int{1, 2, 3, 4}\nsa := a[1:3]\nfmt.Printf(\"%p\\n\", sa) //输出：0xc0840046e0\nsa = append(sa, 11, 22, 33)\nfmt.Printf(\"%p\\n\", sa) //输出：0xc084003200\n```\n\n可以看到执行了append操作后，内存地址发生了变化，说明已经不是引用传递。\n\n### 再拓展\n\n那么有的小伙伴可能会想，Python也是引用，会不会也存在同样的问题？\n\n```python\nIn [1]: a = [1,2,3,4]\n\nIn [2]: b = a[2:3]\n\nIn [3]: print b\n[3]\n\nIn [4]: b.append(9)\n\nIn [5]: print a\n[1, 2, 3, 4]\n\nIn [6]: print b\n[3, 9]\n```\n\n通过Ipython做实验，发现结果与Golang并不像同，这是为什么呢？\n\n这其实与Python内部的内存管理机制有关。在Python当中，为了节省内存，所有相同的值都只会有一个实体存在于内存当中，其他的对象指示对这个值的引用。Python内存管理通过引用计数器来判断某个内存是否无效，然后进行垃圾清理。\n\n而虽然Python是引用同一个地址，但是知识值是引用同一个地址。通过id函数我们可以发现Python当中的切片与原数组的关系。\n\n```python\nIn [7]: id(a)\nOut[7]: 139899423150448\n\nIn [8]: id(b)\nOut[8]: 139899423211888\n\n```\n\n再来看一下下面这个例子，相信你也马上就能明白了。\n\n这是对这两个list当中相同元素的地址。\n\n```python\nIn [9]: id(a[2])\nOut[9]: 39203112\n\nIn [10]: id(b[0])\nOut[10]: 39203112\n```\n\n由此拓展，同理，如果slice的元素发生改变，也会修改相应的","source":"_posts/Go语言append函数操作slice时的一个小坑.md","raw":"---\ntitle: Go语言append函数操作slice时的一个小坑\ndate: 2017-02-05 15:56:37\ntags: \n    - Golang\n    - Python\n---\n{% cq %}在学习Go语言的slice时发现了这样的一个问题，当对slice进行追加的时候，数据会被追加回原数组当中。{% endcq %}\n\n<!-- more -->\n\n### 问题重现\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\n\tArray_list_1 := [10]byte{'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'}\n\tArray_list_2 := [10]byte{'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'}\n\n\tslice_list_1 := Array_list_1[2:5]\n\tslice_list_2 := Array_list_1[3:]\n\tb := append(slice_list_1, 'p')\n\n\tfmt.Println(Array_list_1)\n\tfmt.Println(Array_list_2)\n\tfmt.Println(slice_list_1)\n\tfmt.Println(slice_list_2)\n\tfmt.Println(b)\n}\n\n```\n\n输出的结果是\n\n```reStructuredText\n[97 98 99 100 101 112 103 104 105 106]\n[97 98 99 100 101 102 103 104 105 106]\n[99 100 101]\n[100 101 112 103 104 105 106]\n[99 100 101 112]\n\nProcess finished with exit code 0\n```\n\n我创建了两个相同的队列，然后对他们当中的一个（Array_list_1）进行切片，然后对其中一个切片进行追加，结果发现对切片进行追加后，原数组的内容也发生了改变，由102变为了112。\n\n### 原理解析\n\n![](/images/post/2017205/slice.png)\n\n查阅资料后得知，**slice是引用类型**，在内存中并没有属于自己的内存空间，而是**通过指针指向进行切片的队列**。由于队列分配的内存空间是连续的，所以如果slice的最后一个元素不是list的最后一个元素，那么在append的时候，**新追加的元素就会覆盖掉原数组的元素**。而由于slice是指针组织的，**所以这个list的所有slice都会被影响**。如果切片末尾元素就是队列的末尾元素，返回的 slice 数组指针将指向这个空间，而原数组的内容将保持不变，其它引用此数组的 slice 则不受影响。\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\n\tArray_list_1 := [3]byte{'a', 'b', 'c'}\n\tArray_list_2 := [3]byte{'a', 'b', 'c'}\n\n\tslice_list_1 := Array_list_1[:]\n\tslice_list_2 := Array_list_1[:]\n\tb := append(slice_list_1, 'p')\n\n\tfmt.Println(Array_list_1)\n\tfmt.Println(Array_list_2)\n\tfmt.Println(slice_list_1)\n\tfmt.Println(slice_list_2)\n\tfmt.Println(b)\n}\n\n```\n\n输出结果\n\n```reStructuredText\n[97 98 99]\n[97 98 99]\n[97 98 99]\n[97 98 99]\n[97 98 99 112]\n\nProcess finished with exit code 0\n\n```\n\n由此拓展可以知道，所有对slice的修改都会对原list产生修改。所以使用的时候一定要小心。\n\n\n\n#### 补充，实际应用当中的“意外”\n\n上边我们一直在说，Slice是引用类型，指向的都是内存中的同一块内存，不过在实际应用中，有的时候却会发生“意外”，这种情况只有在像切片append元素的时候出现，Slice的处理机制是这样的，当Slice的容量还有空闲的时候，append进来的元素会直接使用空闲的容量空间，但是一旦append进来的元素个数超过了原来指定容量值的时候，内存管理器就是重新开辟一个更大的内存空间，用于存储多出来的元素，并且会将原来的元素复制一份，放到这块新开辟的内存空间。\n\n```go\na := []int{1, 2, 3, 4}\nsa := a[1:3]\nfmt.Printf(\"%p\\n\", sa) //输出：0xc0840046e0\nsa = append(sa, 11, 22, 33)\nfmt.Printf(\"%p\\n\", sa) //输出：0xc084003200\n```\n\n可以看到执行了append操作后，内存地址发生了变化，说明已经不是引用传递。\n\n### 再拓展\n\n那么有的小伙伴可能会想，Python也是引用，会不会也存在同样的问题？\n\n```python\nIn [1]: a = [1,2,3,4]\n\nIn [2]: b = a[2:3]\n\nIn [3]: print b\n[3]\n\nIn [4]: b.append(9)\n\nIn [5]: print a\n[1, 2, 3, 4]\n\nIn [6]: print b\n[3, 9]\n```\n\n通过Ipython做实验，发现结果与Golang并不像同，这是为什么呢？\n\n这其实与Python内部的内存管理机制有关。在Python当中，为了节省内存，所有相同的值都只会有一个实体存在于内存当中，其他的对象指示对这个值的引用。Python内存管理通过引用计数器来判断某个内存是否无效，然后进行垃圾清理。\n\n而虽然Python是引用同一个地址，但是知识值是引用同一个地址。通过id函数我们可以发现Python当中的切片与原数组的关系。\n\n```python\nIn [7]: id(a)\nOut[7]: 139899423150448\n\nIn [8]: id(b)\nOut[8]: 139899423211888\n\n```\n\n再来看一下下面这个例子，相信你也马上就能明白了。\n\n这是对这两个list当中相同元素的地址。\n\n```python\nIn [9]: id(a[2])\nOut[9]: 39203112\n\nIn [10]: id(b[0])\nOut[10]: 39203112\n```\n\n由此拓展，同理，如果slice的元素发生改变，也会修改相应的","slug":"Go语言append函数操作slice时的一个小坑","published":1,"updated":"2017-04-15T10:32:29.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1j873bl00037koez2uwty2l","content":"<blockquote class=\"blockquote-center\"><p>在学习Go语言的slice时发现了这样的一个问题，当对slice进行追加的时候，数据会被追加回原数组当中。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"问题重现\"><a href=\"#问题重现\" class=\"headerlink\" title=\"问题重现\"></a>问题重现</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\"></div><div class=\"line\">\tArray_list_1 := [<span class=\"number\">10</span>]<span class=\"keyword\">byte</span>&#123;<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>, <span class=\"string\">'g'</span>, <span class=\"string\">'h'</span>, <span class=\"string\">'i'</span>, <span class=\"string\">'j'</span>&#125;</div><div class=\"line\">\tArray_list_2 := [<span class=\"number\">10</span>]<span class=\"keyword\">byte</span>&#123;<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>, <span class=\"string\">'g'</span>, <span class=\"string\">'h'</span>, <span class=\"string\">'i'</span>, <span class=\"string\">'j'</span>&#125;</div><div class=\"line\"></div><div class=\"line\">\tslice_list_1 := Array_list_1[<span class=\"number\">2</span>:<span class=\"number\">5</span>]</div><div class=\"line\">\tslice_list_2 := Array_list_1[<span class=\"number\">3</span>:]</div><div class=\"line\">\tb := <span class=\"built_in\">append</span>(slice_list_1, <span class=\"string\">'p'</span>)</div><div class=\"line\"></div><div class=\"line\">\tfmt.Println(Array_list_1)</div><div class=\"line\">\tfmt.Println(Array_list_2)</div><div class=\"line\">\tfmt.Println(slice_list_1)</div><div class=\"line\">\tfmt.Println(slice_list_2)</div><div class=\"line\">\tfmt.Println(b)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出的结果是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[97 98 99 100 101 112 103 104 105 106]</div><div class=\"line\">[97 98 99 100 101 102 103 104 105 106]</div><div class=\"line\">[99 100 101]</div><div class=\"line\">[100 101 112 103 104 105 106]</div><div class=\"line\">[99 100 101 112]</div><div class=\"line\"></div><div class=\"line\">Process finished with exit code 0</div></pre></td></tr></table></figure>\n<p>我创建了两个相同的队列，然后对他们当中的一个（Array_list_1）进行切片，然后对其中一个切片进行追加，结果发现对切片进行追加后，原数组的内容也发生了改变，由102变为了112。</p>\n<h3 id=\"原理解析\"><a href=\"#原理解析\" class=\"headerlink\" title=\"原理解析\"></a>原理解析</h3><p><img src=\"/images/post/2017205/slice.png\" alt=\"\"></p>\n<p>查阅资料后得知，<strong>slice是引用类型</strong>，在内存中并没有属于自己的内存空间，而是<strong>通过指针指向进行切片的队列</strong>。由于队列分配的内存空间是连续的，所以如果slice的最后一个元素不是list的最后一个元素，那么在append的时候，<strong>新追加的元素就会覆盖掉原数组的元素</strong>。而由于slice是指针组织的，<strong>所以这个list的所有slice都会被影响</strong>。如果切片末尾元素就是队列的末尾元素，返回的 slice 数组指针将指向这个空间，而原数组的内容将保持不变，其它引用此数组的 slice 则不受影响。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\"></div><div class=\"line\">\tArray_list_1 := [<span class=\"number\">3</span>]<span class=\"keyword\">byte</span>&#123;<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>&#125;</div><div class=\"line\">\tArray_list_2 := [<span class=\"number\">3</span>]<span class=\"keyword\">byte</span>&#123;<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>&#125;</div><div class=\"line\"></div><div class=\"line\">\tslice_list_1 := Array_list_1[:]</div><div class=\"line\">\tslice_list_2 := Array_list_1[:]</div><div class=\"line\">\tb := <span class=\"built_in\">append</span>(slice_list_1, <span class=\"string\">'p'</span>)</div><div class=\"line\"></div><div class=\"line\">\tfmt.Println(Array_list_1)</div><div class=\"line\">\tfmt.Println(Array_list_2)</div><div class=\"line\">\tfmt.Println(slice_list_1)</div><div class=\"line\">\tfmt.Println(slice_list_2)</div><div class=\"line\">\tfmt.Println(b)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[97 98 99]</div><div class=\"line\">[97 98 99]</div><div class=\"line\">[97 98 99]</div><div class=\"line\">[97 98 99]</div><div class=\"line\">[97 98 99 112]</div><div class=\"line\"></div><div class=\"line\">Process finished with exit code 0</div></pre></td></tr></table></figure>\n<p>由此拓展可以知道，所有对slice的修改都会对原list产生修改。所以使用的时候一定要小心。</p>\n<h4 id=\"补充，实际应用当中的“意外”\"><a href=\"#补充，实际应用当中的“意外”\" class=\"headerlink\" title=\"补充，实际应用当中的“意外”\"></a>补充，实际应用当中的“意外”</h4><p>上边我们一直在说，Slice是引用类型，指向的都是内存中的同一块内存，不过在实际应用中，有的时候却会发生“意外”，这种情况只有在像切片append元素的时候出现，Slice的处理机制是这样的，当Slice的容量还有空闲的时候，append进来的元素会直接使用空闲的容量空间，但是一旦append进来的元素个数超过了原来指定容量值的时候，内存管理器就是重新开辟一个更大的内存空间，用于存储多出来的元素，并且会将原来的元素复制一份，放到这块新开辟的内存空间。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">a := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</div><div class=\"line\">sa := a[<span class=\"number\">1</span>:<span class=\"number\">3</span>]</div><div class=\"line\">fmt.Printf(<span class=\"string\">\"%p\\n\"</span>, sa) <span class=\"comment\">//输出：0xc0840046e0</span></div><div class=\"line\">sa = <span class=\"built_in\">append</span>(sa, <span class=\"number\">11</span>, <span class=\"number\">22</span>, <span class=\"number\">33</span>)</div><div class=\"line\">fmt.Printf(<span class=\"string\">\"%p\\n\"</span>, sa) <span class=\"comment\">//输出：0xc084003200</span></div></pre></td></tr></table></figure>\n<p>可以看到执行了append操作后，内存地址发生了变化，说明已经不是引用传递。</p>\n<h3 id=\"再拓展\"><a href=\"#再拓展\" class=\"headerlink\" title=\"再拓展\"></a>再拓展</h3><p>那么有的小伙伴可能会想，Python也是引用，会不会也存在同样的问题？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">In [<span class=\"number\">1</span>]: a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</div><div class=\"line\"></div><div class=\"line\">In [<span class=\"number\">2</span>]: b = a[<span class=\"number\">2</span>:<span class=\"number\">3</span>]</div><div class=\"line\"></div><div class=\"line\">In [<span class=\"number\">3</span>]: <span class=\"keyword\">print</span> b</div><div class=\"line\">[<span class=\"number\">3</span>]</div><div class=\"line\"></div><div class=\"line\">In [<span class=\"number\">4</span>]: b.append(<span class=\"number\">9</span>)</div><div class=\"line\"></div><div class=\"line\">In [<span class=\"number\">5</span>]: <span class=\"keyword\">print</span> a</div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\"></div><div class=\"line\">In [<span class=\"number\">6</span>]: <span class=\"keyword\">print</span> b</div><div class=\"line\">[<span class=\"number\">3</span>, <span class=\"number\">9</span>]</div></pre></td></tr></table></figure>\n<p>通过Ipython做实验，发现结果与Golang并不像同，这是为什么呢？</p>\n<p>这其实与Python内部的内存管理机制有关。在Python当中，为了节省内存，所有相同的值都只会有一个实体存在于内存当中，其他的对象指示对这个值的引用。Python内存管理通过引用计数器来判断某个内存是否无效，然后进行垃圾清理。</p>\n<p>而虽然Python是引用同一个地址，但是知识值是引用同一个地址。通过id函数我们可以发现Python当中的切片与原数组的关系。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">In [<span class=\"number\">7</span>]: id(a)</div><div class=\"line\">Out[<span class=\"number\">7</span>]: <span class=\"number\">139899423150448</span></div><div class=\"line\"></div><div class=\"line\">In [<span class=\"number\">8</span>]: id(b)</div><div class=\"line\">Out[<span class=\"number\">8</span>]: <span class=\"number\">139899423211888</span></div></pre></td></tr></table></figure>\n<p>再来看一下下面这个例子，相信你也马上就能明白了。</p>\n<p>这是对这两个list当中相同元素的地址。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">In [<span class=\"number\">9</span>]: id(a[<span class=\"number\">2</span>])</div><div class=\"line\">Out[<span class=\"number\">9</span>]: <span class=\"number\">39203112</span></div><div class=\"line\"></div><div class=\"line\">In [<span class=\"number\">10</span>]: id(b[<span class=\"number\">0</span>])</div><div class=\"line\">Out[<span class=\"number\">10</span>]: <span class=\"number\">39203112</span></div></pre></td></tr></table></figure>\n<p>由此拓展，同理，如果slice的元素发生改变，也会修改相应的</p>\n","excerpt":"<blockquote class=\"blockquote-center\"><p>在学习Go语言的slice时发现了这样的一个问题，当对slice进行追加的时候，数据会被追加回原数组当中。</p>\n</blockquote>","more":"<h3 id=\"问题重现\"><a href=\"#问题重现\" class=\"headerlink\" title=\"问题重现\"></a>问题重现</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\"></div><div class=\"line\">\tArray_list_1 := [<span class=\"number\">10</span>]<span class=\"keyword\">byte</span>&#123;<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>, <span class=\"string\">'g'</span>, <span class=\"string\">'h'</span>, <span class=\"string\">'i'</span>, <span class=\"string\">'j'</span>&#125;</div><div class=\"line\">\tArray_list_2 := [<span class=\"number\">10</span>]<span class=\"keyword\">byte</span>&#123;<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>, <span class=\"string\">'g'</span>, <span class=\"string\">'h'</span>, <span class=\"string\">'i'</span>, <span class=\"string\">'j'</span>&#125;</div><div class=\"line\"></div><div class=\"line\">\tslice_list_1 := Array_list_1[<span class=\"number\">2</span>:<span class=\"number\">5</span>]</div><div class=\"line\">\tslice_list_2 := Array_list_1[<span class=\"number\">3</span>:]</div><div class=\"line\">\tb := <span class=\"built_in\">append</span>(slice_list_1, <span class=\"string\">'p'</span>)</div><div class=\"line\"></div><div class=\"line\">\tfmt.Println(Array_list_1)</div><div class=\"line\">\tfmt.Println(Array_list_2)</div><div class=\"line\">\tfmt.Println(slice_list_1)</div><div class=\"line\">\tfmt.Println(slice_list_2)</div><div class=\"line\">\tfmt.Println(b)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出的结果是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[97 98 99 100 101 112 103 104 105 106]</div><div class=\"line\">[97 98 99 100 101 102 103 104 105 106]</div><div class=\"line\">[99 100 101]</div><div class=\"line\">[100 101 112 103 104 105 106]</div><div class=\"line\">[99 100 101 112]</div><div class=\"line\"></div><div class=\"line\">Process finished with exit code 0</div></pre></td></tr></table></figure>\n<p>我创建了两个相同的队列，然后对他们当中的一个（Array_list_1）进行切片，然后对其中一个切片进行追加，结果发现对切片进行追加后，原数组的内容也发生了改变，由102变为了112。</p>\n<h3 id=\"原理解析\"><a href=\"#原理解析\" class=\"headerlink\" title=\"原理解析\"></a>原理解析</h3><p><img src=\"/images/post/2017205/slice.png\" alt=\"\"></p>\n<p>查阅资料后得知，<strong>slice是引用类型</strong>，在内存中并没有属于自己的内存空间，而是<strong>通过指针指向进行切片的队列</strong>。由于队列分配的内存空间是连续的，所以如果slice的最后一个元素不是list的最后一个元素，那么在append的时候，<strong>新追加的元素就会覆盖掉原数组的元素</strong>。而由于slice是指针组织的，<strong>所以这个list的所有slice都会被影响</strong>。如果切片末尾元素就是队列的末尾元素，返回的 slice 数组指针将指向这个空间，而原数组的内容将保持不变，其它引用此数组的 slice 则不受影响。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\"></div><div class=\"line\">\tArray_list_1 := [<span class=\"number\">3</span>]<span class=\"keyword\">byte</span>&#123;<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>&#125;</div><div class=\"line\">\tArray_list_2 := [<span class=\"number\">3</span>]<span class=\"keyword\">byte</span>&#123;<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>&#125;</div><div class=\"line\"></div><div class=\"line\">\tslice_list_1 := Array_list_1[:]</div><div class=\"line\">\tslice_list_2 := Array_list_1[:]</div><div class=\"line\">\tb := <span class=\"built_in\">append</span>(slice_list_1, <span class=\"string\">'p'</span>)</div><div class=\"line\"></div><div class=\"line\">\tfmt.Println(Array_list_1)</div><div class=\"line\">\tfmt.Println(Array_list_2)</div><div class=\"line\">\tfmt.Println(slice_list_1)</div><div class=\"line\">\tfmt.Println(slice_list_2)</div><div class=\"line\">\tfmt.Println(b)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[97 98 99]</div><div class=\"line\">[97 98 99]</div><div class=\"line\">[97 98 99]</div><div class=\"line\">[97 98 99]</div><div class=\"line\">[97 98 99 112]</div><div class=\"line\"></div><div class=\"line\">Process finished with exit code 0</div></pre></td></tr></table></figure>\n<p>由此拓展可以知道，所有对slice的修改都会对原list产生修改。所以使用的时候一定要小心。</p>\n<h4 id=\"补充，实际应用当中的“意外”\"><a href=\"#补充，实际应用当中的“意外”\" class=\"headerlink\" title=\"补充，实际应用当中的“意外”\"></a>补充，实际应用当中的“意外”</h4><p>上边我们一直在说，Slice是引用类型，指向的都是内存中的同一块内存，不过在实际应用中，有的时候却会发生“意外”，这种情况只有在像切片append元素的时候出现，Slice的处理机制是这样的，当Slice的容量还有空闲的时候，append进来的元素会直接使用空闲的容量空间，但是一旦append进来的元素个数超过了原来指定容量值的时候，内存管理器就是重新开辟一个更大的内存空间，用于存储多出来的元素，并且会将原来的元素复制一份，放到这块新开辟的内存空间。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">a := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</div><div class=\"line\">sa := a[<span class=\"number\">1</span>:<span class=\"number\">3</span>]</div><div class=\"line\">fmt.Printf(<span class=\"string\">\"%p\\n\"</span>, sa) <span class=\"comment\">//输出：0xc0840046e0</span></div><div class=\"line\">sa = <span class=\"built_in\">append</span>(sa, <span class=\"number\">11</span>, <span class=\"number\">22</span>, <span class=\"number\">33</span>)</div><div class=\"line\">fmt.Printf(<span class=\"string\">\"%p\\n\"</span>, sa) <span class=\"comment\">//输出：0xc084003200</span></div></pre></td></tr></table></figure>\n<p>可以看到执行了append操作后，内存地址发生了变化，说明已经不是引用传递。</p>\n<h3 id=\"再拓展\"><a href=\"#再拓展\" class=\"headerlink\" title=\"再拓展\"></a>再拓展</h3><p>那么有的小伙伴可能会想，Python也是引用，会不会也存在同样的问题？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">In [<span class=\"number\">1</span>]: a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</div><div class=\"line\"></div><div class=\"line\">In [<span class=\"number\">2</span>]: b = a[<span class=\"number\">2</span>:<span class=\"number\">3</span>]</div><div class=\"line\"></div><div class=\"line\">In [<span class=\"number\">3</span>]: <span class=\"keyword\">print</span> b</div><div class=\"line\">[<span class=\"number\">3</span>]</div><div class=\"line\"></div><div class=\"line\">In [<span class=\"number\">4</span>]: b.append(<span class=\"number\">9</span>)</div><div class=\"line\"></div><div class=\"line\">In [<span class=\"number\">5</span>]: <span class=\"keyword\">print</span> a</div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\"></div><div class=\"line\">In [<span class=\"number\">6</span>]: <span class=\"keyword\">print</span> b</div><div class=\"line\">[<span class=\"number\">3</span>, <span class=\"number\">9</span>]</div></pre></td></tr></table></figure>\n<p>通过Ipython做实验，发现结果与Golang并不像同，这是为什么呢？</p>\n<p>这其实与Python内部的内存管理机制有关。在Python当中，为了节省内存，所有相同的值都只会有一个实体存在于内存当中，其他的对象指示对这个值的引用。Python内存管理通过引用计数器来判断某个内存是否无效，然后进行垃圾清理。</p>\n<p>而虽然Python是引用同一个地址，但是知识值是引用同一个地址。通过id函数我们可以发现Python当中的切片与原数组的关系。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">In [<span class=\"number\">7</span>]: id(a)</div><div class=\"line\">Out[<span class=\"number\">7</span>]: <span class=\"number\">139899423150448</span></div><div class=\"line\"></div><div class=\"line\">In [<span class=\"number\">8</span>]: id(b)</div><div class=\"line\">Out[<span class=\"number\">8</span>]: <span class=\"number\">139899423211888</span></div></pre></td></tr></table></figure>\n<p>再来看一下下面这个例子，相信你也马上就能明白了。</p>\n<p>这是对这两个list当中相同元素的地址。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">In [<span class=\"number\">9</span>]: id(a[<span class=\"number\">2</span>])</div><div class=\"line\">Out[<span class=\"number\">9</span>]: <span class=\"number\">39203112</span></div><div class=\"line\"></div><div class=\"line\">In [<span class=\"number\">10</span>]: id(b[<span class=\"number\">0</span>])</div><div class=\"line\">Out[<span class=\"number\">10</span>]: <span class=\"number\">39203112</span></div></pre></td></tr></table></figure>\n<p>由此拓展，同理，如果slice的元素发生改变，也会修改相应的</p>"},{"title":"Go语言自制简易WebServer","date":"2017-02-07T03:12:44.000Z","_content":"{%cq%}\n姿势：如何自己搭建一个简易WebServer。\n{%endcq%}\n\n<!-- more -->\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc sayhelloName(w http.ResponseWriter, r *http.Request) {\n\t// 解析参数,默认是不会解析的\n\tr.ParseForm()\n\t// 这些信息是输出到服务器端的打印信息\n\tfmt.Println(r.Form)\n\n\t// 获取输入的URL地址\n\tfmt.Println(\"path\", r.URL.Path)\n\t//fmt.Println(\"scheme\", r.URL.Scheme)\n\n\t// 获得传递的参数\n\tfmt.Println(r.Form[\"url_long\"])\n\tfor k, v := range r.Form {\n\t\tfmt.Println(\"key:\", k)\n\t\tfmt.Println(\"val:\", strings.Join(v, \",\"))\n\t}\n\n\t// 返回结果\n\tfmt.Fprintf(w, \"Hello 李鹏翔!\") // 这个写入到 w 的是输出到客户端的\n}\nfunc main() {\n\t// 设置访问的路由\n\thttp.HandleFunc(\"/\", sayhelloName)        \n\t// 设置监听的端口10160\t\n\terr := http.ListenAndServe(\":10160\", nil) \n\n\tif err != nil {\n\t\tlog.Fatal(\"ListenAndServe: \", err)\n\t}\n}\n```\n\nGo语言实现WebServer是一件非常容易的事情。\n\n通过这个简单的WebServer我们可以很轻松的实现REST接口。\n\n那你也许就会问,我们的nginx、apache服务器不需要吗？Go就是不需要这些，因为他直接就监听tcp端口了，做了nginx做的事情，然后sayhelloName这个其实就是我们写的逻辑函数了，其实就是controller。\n","source":"_posts/Go语言自制简易WebServer.md","raw":"---\ntitle: Go语言自制简易WebServer\ndate: 2017-02-07 11:12:44\ntags: Golang\n---\n{%cq%}\n姿势：如何自己搭建一个简易WebServer。\n{%endcq%}\n\n<!-- more -->\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc sayhelloName(w http.ResponseWriter, r *http.Request) {\n\t// 解析参数,默认是不会解析的\n\tr.ParseForm()\n\t// 这些信息是输出到服务器端的打印信息\n\tfmt.Println(r.Form)\n\n\t// 获取输入的URL地址\n\tfmt.Println(\"path\", r.URL.Path)\n\t//fmt.Println(\"scheme\", r.URL.Scheme)\n\n\t// 获得传递的参数\n\tfmt.Println(r.Form[\"url_long\"])\n\tfor k, v := range r.Form {\n\t\tfmt.Println(\"key:\", k)\n\t\tfmt.Println(\"val:\", strings.Join(v, \",\"))\n\t}\n\n\t// 返回结果\n\tfmt.Fprintf(w, \"Hello 李鹏翔!\") // 这个写入到 w 的是输出到客户端的\n}\nfunc main() {\n\t// 设置访问的路由\n\thttp.HandleFunc(\"/\", sayhelloName)        \n\t// 设置监听的端口10160\t\n\terr := http.ListenAndServe(\":10160\", nil) \n\n\tif err != nil {\n\t\tlog.Fatal(\"ListenAndServe: \", err)\n\t}\n}\n```\n\nGo语言实现WebServer是一件非常容易的事情。\n\n通过这个简单的WebServer我们可以很轻松的实现REST接口。\n\n那你也许就会问,我们的nginx、apache服务器不需要吗？Go就是不需要这些，因为他直接就监听tcp端口了，做了nginx做的事情，然后sayhelloName这个其实就是我们写的逻辑函数了，其实就是controller。\n","slug":"Go语言自制简易WebServer","published":1,"updated":"2017-04-15T10:32:29.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1j873bt00057koehaawbyri","content":"<blockquote class=\"blockquote-center\"><p>姿势：如何自己搭建一个简易WebServer。</p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"log\"</span></div><div class=\"line\">\t<span class=\"string\">\"net/http\"</span></div><div class=\"line\">\t<span class=\"string\">\"strings\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sayhelloName</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// 解析参数,默认是不会解析的</span></div><div class=\"line\">\tr.ParseForm()</div><div class=\"line\">\t<span class=\"comment\">// 这些信息是输出到服务器端的打印信息</span></div><div class=\"line\">\tfmt.Println(r.Form)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 获取输入的URL地址</span></div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"path\"</span>, r.URL.Path)</div><div class=\"line\">\t<span class=\"comment\">//fmt.Println(\"scheme\", r.URL.Scheme)</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 获得传递的参数</span></div><div class=\"line\">\tfmt.Println(r.Form[<span class=\"string\">\"url_long\"</span>])</div><div class=\"line\">\t<span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> r.Form &#123;</div><div class=\"line\">\t\tfmt.Println(<span class=\"string\">\"key:\"</span>, k)</div><div class=\"line\">\t\tfmt.Println(<span class=\"string\">\"val:\"</span>, strings.Join(v, <span class=\"string\">\",\"</span>))</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 返回结果</span></div><div class=\"line\">\tfmt.Fprintf(w, <span class=\"string\">\"Hello 李鹏翔!\"</span>) <span class=\"comment\">// 这个写入到 w 的是输出到客户端的</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// 设置访问的路由</span></div><div class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/\"</span>, sayhelloName)        </div><div class=\"line\">\t<span class=\"comment\">// 设置监听的端口10160\t</span></div><div class=\"line\">\terr := http.ListenAndServe(<span class=\"string\">\":10160\"</span>, <span class=\"literal\">nil</span>) </div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"ListenAndServe: \"</span>, err)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Go语言实现WebServer是一件非常容易的事情。</p>\n<p>通过这个简单的WebServer我们可以很轻松的实现REST接口。</p>\n<p>那你也许就会问,我们的nginx、apache服务器不需要吗？Go就是不需要这些，因为他直接就监听tcp端口了，做了nginx做的事情，然后sayhelloName这个其实就是我们写的逻辑函数了，其实就是controller。</p>\n","excerpt":"<blockquote class=\"blockquote-center\"><p>姿势：如何自己搭建一个简易WebServer。</p>\n</blockquote>","more":"<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"log\"</span></div><div class=\"line\">\t<span class=\"string\">\"net/http\"</span></div><div class=\"line\">\t<span class=\"string\">\"strings\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sayhelloName</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// 解析参数,默认是不会解析的</span></div><div class=\"line\">\tr.ParseForm()</div><div class=\"line\">\t<span class=\"comment\">// 这些信息是输出到服务器端的打印信息</span></div><div class=\"line\">\tfmt.Println(r.Form)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 获取输入的URL地址</span></div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"path\"</span>, r.URL.Path)</div><div class=\"line\">\t<span class=\"comment\">//fmt.Println(\"scheme\", r.URL.Scheme)</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 获得传递的参数</span></div><div class=\"line\">\tfmt.Println(r.Form[<span class=\"string\">\"url_long\"</span>])</div><div class=\"line\">\t<span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> r.Form &#123;</div><div class=\"line\">\t\tfmt.Println(<span class=\"string\">\"key:\"</span>, k)</div><div class=\"line\">\t\tfmt.Println(<span class=\"string\">\"val:\"</span>, strings.Join(v, <span class=\"string\">\",\"</span>))</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 返回结果</span></div><div class=\"line\">\tfmt.Fprintf(w, <span class=\"string\">\"Hello 李鹏翔!\"</span>) <span class=\"comment\">// 这个写入到 w 的是输出到客户端的</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// 设置访问的路由</span></div><div class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/\"</span>, sayhelloName)        </div><div class=\"line\">\t<span class=\"comment\">// 设置监听的端口10160\t</span></div><div class=\"line\">\terr := http.ListenAndServe(<span class=\"string\">\":10160\"</span>, <span class=\"literal\">nil</span>) </div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"ListenAndServe: \"</span>, err)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Go语言实现WebServer是一件非常容易的事情。</p>\n<p>通过这个简单的WebServer我们可以很轻松的实现REST接口。</p>\n<p>那你也许就会问,我们的nginx、apache服务器不需要吗？Go就是不需要这些，因为他直接就监听tcp端口了，做了nginx做的事情，然后sayhelloName这个其实就是我们写的逻辑函数了，其实就是controller。</p>"},{"title":"Django傻瓜教程第一章：废话与基本安装与运行","date":"2017-04-15T10:35:22.000Z","_content":"\n{%cq%}\n\n​\t知识要传递给下一代，新手司机带个小胸弟一起上路。\n\n{%cq%}\n\n<!-- more -->\n\n## BEFORE ALL\n\n> WARNING : 此系列教程的所有代码都要跟着敲，尽可能完成最后留下的习题作业。[敲黑板]G同学，就是在跟你说话。\n\n开头的几章比较简单、漫长。然我们慢慢回忆起关于Python，关于Django的一切吧...\n\n整个教程将会沿着Django这条路线，将Django的MTV三部分依次讲完，并会连带着介绍Django本身的一些特性或功能，比如Admin，比如Model。\n\n讲解Templates的时候也会捎带着介绍一些前端知识，传授一个古老工具与框架JQuery、还有当前非常流行的Bootstarp等。\n\n整个教程过程中会穿插Python基础语法的介绍，以及一些使用某些方法或函数的时候个人总结的一些小技巧，或者遇到的一些坑。\n\n下面将正式开始这个系列的教程。\n\n## WHAT IS DJANGO AND HOW SHOULD I USE IT?\t\n\n### Django Say Hello\n\n正所谓“知其然，知其所以然”。想要了解一门技术并深入学习，了解起发展历史是一件非常有必要的事情。通过其发展历史可以看到这门技术的精神和灵魂，更利于我们去理解掌握它。\n\n说出来你可能不信，这个目前风靡Python圈的框架，敏捷开发与模块化设计的代表，最初是由一个来自堪萨斯州的网络开发小组编写的，而这个开发小组是在一家新闻出版社里的...\n\n> ​\t它诞生于 2003 年秋天，那时 Lawrence Journal-World 报纸的程序员 Adrian Holovaty 和 Simon Willison 开始用 Python 来编写程序。\n>\n> ​\t当时他们的 World Online 小组制作并维护当地的几个新闻站点, 并在以新闻界特有的快节奏开发环境中逐渐发展。 这些站点包括有 LJWorld.com、Lawrence.com 和 KUsports.com， 记者（或管理层） 要求增加的特征或整个程序都能在计划时间内快速的被建立，这些时间通常只有几天 或几个小时。 因此，Adrian 和 Simon 开发了一种节省时间的网络程序开发框架， 这是在截止时间前能完成程序的唯一途径。\n\n而在这样的环境下出生的Django很自然的就被赋予了快速、简便的基因。所以这也是为什么Django提供了管理后台、动态模板、数据库驱动等一系列功能。这些功能的存在正是为了动态内容管理。\n\n​\tDjango开源之后，经过~~GayHub~~众人调教之后，这个Python框架也越来越趋于成熟。其快速开发的理念也影响了相当一部分框架和设计模式。\n\n### Django Install\n\nDjango的安装文档在网上有很多，这里就不赘述了，简便的安装命令如下：\n\n```shell\nsudo pip install django\n```\n\n当然你也可以去Django官网下载tar包，使用setup.py进行安装。\n\n```shell\ntar -xvf django.tar.gz\ncd django.tar.gz\npython setup.pyt install\n```\n\n### My First Django Project\n\n在操作系统中安装了Django之后，你的**环境变量**当中会多出来下面这个命令：\n\n```shell\ndjango-admin\n```\n\n运行之后会看到这个：\n\n```shell\n$ django-admin\n\nType 'django-admin help <subcommand>' for help on a specific subcommand.\n\nAvailable subcommands:\n\n[django]\n    check\n    compilemessages\n    createcachetable\n    dbshell\n    diffsettings\n    dumpdata\n    flush\n    inspectdb\n    loaddata\n    makemessages\n    makemigrations\n    migrate\n    runserver\n    sendtestemail\n    shell\n    showmigrations\n    sqlflush\n    sqlmigrate\n    sqlsequencereset\n    squashmigrations\n    startapp\n    startproject\n    test\n    testserver\nNote that only Django core commands are listed as settings are not properly conf  igured (error: Requested setting INSTALLED_APPS, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.).\n\n```\n\n这条命令的其他选项~~日后~~我们会慢慢一一介绍，最开始先讲开始一个Django项目的必须使用的命令。\n\n```shell\nstartapp\nstartproject\n```\n\n#### A new Django project\n\n```shell\ndjango-admin startproject gjyPython\n```\n\n这条命令就是创建Python项目的命令了。创建之后会在当前路径下生成一个project路径。\n\n然后执行下列命令，\n\n```shell\ncd gjyPython\nls\n```\n\n我们可以看到这样两个东西。\n\n```shell\ngjyPython/  manage.py\n```\n\n其中gjyPython就是我们这个项目的主体了，它本身是个App，也是整个Project基石，因为这个与项目同名的App里包含着整个Project的基础配置。\n\n而manage.py文件是整个项目的\n\n#### A new Django app\n\n我们依然在刚才创建好的Project路径内，输入以下命令：\n\n```shell\n$ django-admin startapp newApp\n```\n然后我们再看一下当前路径下的内容，发现多了一个目录，而这个目录就是我们创建的App了。\n```\n$ ls\ngjyPython/  manage.py  newApp/\n```\n\n### Hello World\n\n安装好项目之后我们就可以尝试着启动项目了。\n\n```shell\npython manage.py runserver localhost:8000\n```\n\n然后我们在浏览器中输入`localhost:8000`之后，就可以看到我们的欢迎页面了。\n\n![ItWork](/images/post/20170415/itwork.png)\n\n## 最后\n\n这就是基本的简单安装了。\n\n其实本来想写更多，但是我困了...所以我们下期再见~","source":"_posts/Django基础教程第一章：安装与基本结构.md","raw":"---\ntitle: Django傻瓜教程第一章：废话与基本安装与运行\ndate: 2017-04-15 18:35:22\ntags: \n - Django\n - python\n - GJY特别教程\n---\n\n{%cq%}\n\n​\t知识要传递给下一代，新手司机带个小胸弟一起上路。\n\n{%cq%}\n\n<!-- more -->\n\n## BEFORE ALL\n\n> WARNING : 此系列教程的所有代码都要跟着敲，尽可能完成最后留下的习题作业。[敲黑板]G同学，就是在跟你说话。\n\n开头的几章比较简单、漫长。然我们慢慢回忆起关于Python，关于Django的一切吧...\n\n整个教程将会沿着Django这条路线，将Django的MTV三部分依次讲完，并会连带着介绍Django本身的一些特性或功能，比如Admin，比如Model。\n\n讲解Templates的时候也会捎带着介绍一些前端知识，传授一个古老工具与框架JQuery、还有当前非常流行的Bootstarp等。\n\n整个教程过程中会穿插Python基础语法的介绍，以及一些使用某些方法或函数的时候个人总结的一些小技巧，或者遇到的一些坑。\n\n下面将正式开始这个系列的教程。\n\n## WHAT IS DJANGO AND HOW SHOULD I USE IT?\t\n\n### Django Say Hello\n\n正所谓“知其然，知其所以然”。想要了解一门技术并深入学习，了解起发展历史是一件非常有必要的事情。通过其发展历史可以看到这门技术的精神和灵魂，更利于我们去理解掌握它。\n\n说出来你可能不信，这个目前风靡Python圈的框架，敏捷开发与模块化设计的代表，最初是由一个来自堪萨斯州的网络开发小组编写的，而这个开发小组是在一家新闻出版社里的...\n\n> ​\t它诞生于 2003 年秋天，那时 Lawrence Journal-World 报纸的程序员 Adrian Holovaty 和 Simon Willison 开始用 Python 来编写程序。\n>\n> ​\t当时他们的 World Online 小组制作并维护当地的几个新闻站点, 并在以新闻界特有的快节奏开发环境中逐渐发展。 这些站点包括有 LJWorld.com、Lawrence.com 和 KUsports.com， 记者（或管理层） 要求增加的特征或整个程序都能在计划时间内快速的被建立，这些时间通常只有几天 或几个小时。 因此，Adrian 和 Simon 开发了一种节省时间的网络程序开发框架， 这是在截止时间前能完成程序的唯一途径。\n\n而在这样的环境下出生的Django很自然的就被赋予了快速、简便的基因。所以这也是为什么Django提供了管理后台、动态模板、数据库驱动等一系列功能。这些功能的存在正是为了动态内容管理。\n\n​\tDjango开源之后，经过~~GayHub~~众人调教之后，这个Python框架也越来越趋于成熟。其快速开发的理念也影响了相当一部分框架和设计模式。\n\n### Django Install\n\nDjango的安装文档在网上有很多，这里就不赘述了，简便的安装命令如下：\n\n```shell\nsudo pip install django\n```\n\n当然你也可以去Django官网下载tar包，使用setup.py进行安装。\n\n```shell\ntar -xvf django.tar.gz\ncd django.tar.gz\npython setup.pyt install\n```\n\n### My First Django Project\n\n在操作系统中安装了Django之后，你的**环境变量**当中会多出来下面这个命令：\n\n```shell\ndjango-admin\n```\n\n运行之后会看到这个：\n\n```shell\n$ django-admin\n\nType 'django-admin help <subcommand>' for help on a specific subcommand.\n\nAvailable subcommands:\n\n[django]\n    check\n    compilemessages\n    createcachetable\n    dbshell\n    diffsettings\n    dumpdata\n    flush\n    inspectdb\n    loaddata\n    makemessages\n    makemigrations\n    migrate\n    runserver\n    sendtestemail\n    shell\n    showmigrations\n    sqlflush\n    sqlmigrate\n    sqlsequencereset\n    squashmigrations\n    startapp\n    startproject\n    test\n    testserver\nNote that only Django core commands are listed as settings are not properly conf  igured (error: Requested setting INSTALLED_APPS, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.).\n\n```\n\n这条命令的其他选项~~日后~~我们会慢慢一一介绍，最开始先讲开始一个Django项目的必须使用的命令。\n\n```shell\nstartapp\nstartproject\n```\n\n#### A new Django project\n\n```shell\ndjango-admin startproject gjyPython\n```\n\n这条命令就是创建Python项目的命令了。创建之后会在当前路径下生成一个project路径。\n\n然后执行下列命令，\n\n```shell\ncd gjyPython\nls\n```\n\n我们可以看到这样两个东西。\n\n```shell\ngjyPython/  manage.py\n```\n\n其中gjyPython就是我们这个项目的主体了，它本身是个App，也是整个Project基石，因为这个与项目同名的App里包含着整个Project的基础配置。\n\n而manage.py文件是整个项目的\n\n#### A new Django app\n\n我们依然在刚才创建好的Project路径内，输入以下命令：\n\n```shell\n$ django-admin startapp newApp\n```\n然后我们再看一下当前路径下的内容，发现多了一个目录，而这个目录就是我们创建的App了。\n```\n$ ls\ngjyPython/  manage.py  newApp/\n```\n\n### Hello World\n\n安装好项目之后我们就可以尝试着启动项目了。\n\n```shell\npython manage.py runserver localhost:8000\n```\n\n然后我们在浏览器中输入`localhost:8000`之后，就可以看到我们的欢迎页面了。\n\n![ItWork](/images/post/20170415/itwork.png)\n\n## 最后\n\n这就是基本的简单安装了。\n\n其实本来想写更多，但是我困了...所以我们下期再见~","slug":"Django基础教程第一章：安装与基本结构","published":1,"updated":"2017-04-15T12:17:38.916Z","_id":"cj1j873bw00067koeqcik5zy4","comments":1,"layout":"post","photos":[],"link":""},{"title":"Python字符串加密实现","date":"2017-02-04T01:46:57.000Z","_content":"{% cq %}之前负责的一个项目是针对公司测试、实验环境提供一套共用的脚本审核发布系统，其中涉及到了自定义数据库与发布帐号的注册。由于是共用系统，为了账户信息的安全，对敏感字段进行了加密处理。\n以下是整理的笔记以及总结的一些方法论。{% endcq %}\n\n<!-- more -->\n\n### 字符串加密基本思路\n#### 可逆加密\n> 可还原加密是指对加密后生成的字符串进行解密，可以得到原字符串。\n\n这种加密的实现方法有很多种，平时使用较多的一个是采用base64模块，再就是自己写加密算法实现。\n##### Base64\n> Base64是网络上最常见的用于传输8Bit字节代码的编码方式之一。\n\nBase64就是利用a-z，A-Z，0-9外加'+'和'/'（最后两个特殊符号会根据不同的Base64变种而有所不同）这总共64个字符对原字符串进行处理替换，来达到对使原字符串不可见的效果。\n但是这种加密算法非常简单，是可逆的，安全性很低。\nBase64算法的简单规则如下：\n1. 把3个字符变成4个字符。\n2. 每76个字符加一个换行符。\n3. 最后的结束符也要处理。\n\n[点击我查看更多Base64](http://baike.baidu.com/link?url=E8-vj9CcIckBaSvpw_Sx-9Y7RhpXBR1hctrI9hiGgdQ6YAwuXE0U_jPLsOoLatdlgxNecox6_CYoiUHixX5P0q)\n##### 自定义加密算法\n通过自己设计的加密规则对字符串进行处理，来达到字符串不可见的效果。\n这个方法的安全性在于加密算法的保密性。\n#### 不可逆加密 \n##### 摘要算法\n常见的'MD5'、'SHA1'这些加密就是摘要算法加密。（就是哈希算法）\n> 其实摘要算法不是加密算法，无法通过摘要反推明文，只能用于防篡改，但是它的单向计算特性决定了可以在不存储明文口令的情况下验证用户口令。\n\n摘要算法最长用在文件完整性校验，密码验证等不需要反推只需要对比的场景下。\n所以，为什么QQ密码只能重置不能找回。所以，付费MD5解密都是骗人的。\n\n---\n### 示例代码\n#### Base64\n```python\nimport base64\n\ns1 = base64.encodestring('hello world')\ns2 = base64.decodestring(s1)\nprint s1, s2\n```\n输出结果\n```\naGVsbG8gd29ybGQ=\nhello world\n```\n\n#### 摘要算法\n##### MD5\n```python\nimport hashlib\n\ntest_string = '123456'\n\nmd5 = hashlib.md5()\nmd5.update(test_string.encode('utf-8'))\nmd5_encode = md5.hexdigest()\nprint(md5_encode)\n\nsha1 = hashlib.sha1()\nsha1.update(test_string.encode('utf-8'))\nsha1_encode = sha1.hexdigest()\nprint(sha1_encode)\n```\n输出结果\n```\ne10adc3949ba59abbe56e057f20f883e \n7c4a8d09ca3762af61e59520943dc26494f8941b\n```\n多次追加\n\n```python\nmd5 = hashlib.md5()\nmd5.update('how to use md5 in ')\nmd5.update('python hashlib?')\nprint md5.hexdigest()\n```\n加盐\n```python\n# 方法1（固定盐）\ndef calc_md5(password):\n    return get_md5(password + 'the-Salt')\n\n# 方法2（用户名盐）\ndb = {}\ndef register(username, password):\n    db[username] = get_md5(password + username + 'the-Salt')\n```\n\n##### SHA1\n```python\nimport hashlib\n\nsha1 = hashlib.sha1()\nsha1.update('how to use sha1 in ')\nsha1.update('python hashlib?')\nprint sha1.hexdigest()\n```\nSHA1的结果是160 bit字节，通常用一个40位的16进制字符串表示。\n\n比SHA1更安全的算法是SHA256和SHA512，不过越安全的算法越慢，而且摘要长度更长。\n\n### 其他\n有没有可能两个不同的数据通过某个摘要算法得到了相同的摘要？完全有可能，因为任何摘要算法都是把无限多的数据集合映射到一个有限的集合中。这种情况称为碰撞，比如Bob试图根据你的摘要反推出一篇文章'how to learn hashlib in python - by Bob'，并且这篇文章的摘要恰好和你的文章完全一致，这种情况也并非不可能出现，但是非常非常困难。\n","source":"_posts/Python-常用加密方法.md","raw":"---\ntitle: 'Python字符串加密实现'\ndate: 2017-02-04 09:46:57\ntags: Python\n---\n{% cq %}之前负责的一个项目是针对公司测试、实验环境提供一套共用的脚本审核发布系统，其中涉及到了自定义数据库与发布帐号的注册。由于是共用系统，为了账户信息的安全，对敏感字段进行了加密处理。\n以下是整理的笔记以及总结的一些方法论。{% endcq %}\n\n<!-- more -->\n\n### 字符串加密基本思路\n#### 可逆加密\n> 可还原加密是指对加密后生成的字符串进行解密，可以得到原字符串。\n\n这种加密的实现方法有很多种，平时使用较多的一个是采用base64模块，再就是自己写加密算法实现。\n##### Base64\n> Base64是网络上最常见的用于传输8Bit字节代码的编码方式之一。\n\nBase64就是利用a-z，A-Z，0-9外加'+'和'/'（最后两个特殊符号会根据不同的Base64变种而有所不同）这总共64个字符对原字符串进行处理替换，来达到对使原字符串不可见的效果。\n但是这种加密算法非常简单，是可逆的，安全性很低。\nBase64算法的简单规则如下：\n1. 把3个字符变成4个字符。\n2. 每76个字符加一个换行符。\n3. 最后的结束符也要处理。\n\n[点击我查看更多Base64](http://baike.baidu.com/link?url=E8-vj9CcIckBaSvpw_Sx-9Y7RhpXBR1hctrI9hiGgdQ6YAwuXE0U_jPLsOoLatdlgxNecox6_CYoiUHixX5P0q)\n##### 自定义加密算法\n通过自己设计的加密规则对字符串进行处理，来达到字符串不可见的效果。\n这个方法的安全性在于加密算法的保密性。\n#### 不可逆加密 \n##### 摘要算法\n常见的'MD5'、'SHA1'这些加密就是摘要算法加密。（就是哈希算法）\n> 其实摘要算法不是加密算法，无法通过摘要反推明文，只能用于防篡改，但是它的单向计算特性决定了可以在不存储明文口令的情况下验证用户口令。\n\n摘要算法最长用在文件完整性校验，密码验证等不需要反推只需要对比的场景下。\n所以，为什么QQ密码只能重置不能找回。所以，付费MD5解密都是骗人的。\n\n---\n### 示例代码\n#### Base64\n```python\nimport base64\n\ns1 = base64.encodestring('hello world')\ns2 = base64.decodestring(s1)\nprint s1, s2\n```\n输出结果\n```\naGVsbG8gd29ybGQ=\nhello world\n```\n\n#### 摘要算法\n##### MD5\n```python\nimport hashlib\n\ntest_string = '123456'\n\nmd5 = hashlib.md5()\nmd5.update(test_string.encode('utf-8'))\nmd5_encode = md5.hexdigest()\nprint(md5_encode)\n\nsha1 = hashlib.sha1()\nsha1.update(test_string.encode('utf-8'))\nsha1_encode = sha1.hexdigest()\nprint(sha1_encode)\n```\n输出结果\n```\ne10adc3949ba59abbe56e057f20f883e \n7c4a8d09ca3762af61e59520943dc26494f8941b\n```\n多次追加\n\n```python\nmd5 = hashlib.md5()\nmd5.update('how to use md5 in ')\nmd5.update('python hashlib?')\nprint md5.hexdigest()\n```\n加盐\n```python\n# 方法1（固定盐）\ndef calc_md5(password):\n    return get_md5(password + 'the-Salt')\n\n# 方法2（用户名盐）\ndb = {}\ndef register(username, password):\n    db[username] = get_md5(password + username + 'the-Salt')\n```\n\n##### SHA1\n```python\nimport hashlib\n\nsha1 = hashlib.sha1()\nsha1.update('how to use sha1 in ')\nsha1.update('python hashlib?')\nprint sha1.hexdigest()\n```\nSHA1的结果是160 bit字节，通常用一个40位的16进制字符串表示。\n\n比SHA1更安全的算法是SHA256和SHA512，不过越安全的算法越慢，而且摘要长度更长。\n\n### 其他\n有没有可能两个不同的数据通过某个摘要算法得到了相同的摘要？完全有可能，因为任何摘要算法都是把无限多的数据集合映射到一个有限的集合中。这种情况称为碰撞，比如Bob试图根据你的摘要反推出一篇文章'how to learn hashlib in python - by Bob'，并且这篇文章的摘要恰好和你的文章完全一致，这种情况也并非不可能出现，但是非常非常困难。\n","slug":"Python-常用加密方法","published":1,"updated":"2017-04-15T10:32:29.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1j873bx00077koe9a8u6otb"},{"title":"Go语言关于Interface的理解与思考","date":"2017-02-05T15:21:35.000Z","author":"李鹏翔","_content":"因为缺乏接口编程经验，所以一直对Interface理解有些困惑，觉得既然我继承来之后也要全部实现，那么为什么不直接自己定义这些方法？而且也不理解为什么说go语言的Interface设计是颠覆性的。\n刚才静下心来好好研究了一下接口以及实现案例，终于豁然开朗。\n<!-- more -->\n\n### 什么是接口（Interface）\n\n其实说白了，接口就是类与类之间的一种协议，统一一个标准。你要调用我，那你就必须实现我的这些方法。我不需要知道你是怎么实现的，但是你一定要实现。甚至在Objec-C当中都不叫interface，直接protocol。\n\n\n\n关于接口，知呼上有一个人是这么说的\n\n> 接口就是个招牌。\n>\n> 比如说你今年放假出去杭州旅游，玩了一上午，你也有点饿了，突然看到前面有个店子，上面挂着KFC，然后你就知道今天中饭有着落了。\n>\n> KFC就是接口，我们看到了这个接口，就知道这个店会卖炸鸡腿（实现接口）。\n>\n> 那么为神马我们要去定义一个接口涅，这个店可以直接卖炸鸡腿啊（直接写实现方法），是的，这个店可以直接卖炸鸡腿，但没有挂KFC的招牌，我们就不能直接简单粗暴的冲进去叫服务员给两个炸鸡腿了。\n>\n> 要么，我们就要进去问，你这里卖不卖炸鸡腿啊，卖不卖汉堡啊，卖不卖圣代啊（这就是反射）。很显然，这样一家家的问实在是非常麻烦（反射性能很差）。\n> 要么，我们就要记住，中山路108号卖炸鸡，黄山路45号卖炸鸡（硬编码），很显然这样我们要记住的很多很多东西（代码量剧增），而且，如果有新的店卖炸鸡腿，我们也不可能知道（不利于扩展）。\n>\n\n作者：[Ivony链接](https://www.zhihu.com/question/20111251/answer/16585393)\n\n\n\n### 到底有什么用？\n\n我相信不少刚接触interface的人会跟我有一样的疑惑，我实现接口跟不实现接口没什么区别啊？反正都要实现这些方法。\n\n问题的误区就在于，接口的使用并不是单人开发模式的。\n\n刚才那个知呼答案下面的一个不是特别高票的答案我感觉更能解释这个问题。\n\n> 你写接口你写实现，就不用写接口了。\n> 我写接口你实现，接口不就用上了。我不给你规定好了，你怎么知道该实现哪些内容呢。\n> 更进一步，我写接口你实现，你今天不在，我明天出差，程序后天交工，那我今天必须把调用这个接口的代码写好。所以就需要接口中有函数，有明确的函数签名。我写个接口，再把调用函数写好，明天你把接口实现了，传个实例进来，交工。\n> interface换个叫法就是contract，有点合同的意思。A实现了这个接口，代表A**承诺**能做某些事情。\n> B需要一些能做某些事情的东西，于是B要求，必须实现了A接口，才能被我调用。实际上也就是个“规范”。\n\n作者：[nonesuccess链接](https://www.zhihu.com/question/20111251/answer/36219434)\n\n用Go的文法举个例子，排序。\n\n```go\npackage main\nimport (\n    \"fmt\"\n)\ntype Sorter interface {\n    Len() int\n    Less(i, j int) bool\n    Swap(i, j int)\n}\ntype Xi []int\ntype Xs []string\n\nfunc (p Xi) Len() int               { return len(p) }\nfunc (p Xi) Less(i int, j int) bool { return p[j] < p[i] }\nfunc (p Xi) Swap(i int, j int)      { p[i], p[j] = p[j], p[i] }\n\nfunc (p Xs) Len() int               { return len(p) }\nfunc (p Xs) Less(i int, j int) bool { return p[j] < p[i] }\nfunc (p Xs) Swap(i int, j int)      { p[i], p[j] = p[j], p[i] }\n\nfunc Sort(x Sorter) {\n    for i := 0; i < x.Len()-1; i++ {\n        for j := i + 1; j < x.Len(); j++ {\n            if x.Less(i, j) {\n                x.Swap(i, j)\n            }\n        }\n    }\n}\nfunc main() {\n    ints := Xi{44, 67, 3, 17, 89, 10, 73, 9, 14, 8}\n    strings := Xs{\"nut\", \"ape\", \"elephant\", \"zoo\", \"go\"}\n    Sort(ints)\n    fmt.Printf(\"%v\\n\", ints)\n    Sort(strings)\n    fmt.Printf(\"%v\\n\", strings)\n}\n```\n\n这样看，是不是就理解接口的意义了。\n\n### Go语言接口为什么是颠覆性的？\n\n在其他编程语言当中，都是谁提供服务，谁提供接口。你需要调用我的服务，就必须声明你实现了我的接口。\n\n翻译成人话就是我的逻辑力调用了一堆不同功能的函数组织，然后通过一些特定逻辑完成了某个功能，别的模块想要调用我这个功能，就必须把我这个功能里使用的这些函数都给实现了。\n\n而这在逻辑上实际是说不通的，服务提供者怎么会确切的知道服务使用者的具体需求呢？当需求发生变化的时候，服务提供者就需要考虑使用者的需求，从而设计接口。而从理论上来说，每一个服务的开发人员都应该专注于自己的服务。\n\n而go语言不同。go语言的接口是**非侵入式接口**，只要调用者本身实现了该接口的全部方法，就默认实现了该接口（事实上也确实是实现了这个接口），而**不需要显示**的声明实现某个接口。这极大的方便了接口的调用，开发人员不必再需要苦想接口的粒度，只需要专注功能函数的实现就可以了。","source":"_posts/Go语言关于Interface的理解与思考.md","raw":"---\ntitle: Go语言关于Interface的理解与思考\ndate: 2017-02-05 23:21:35\nauthor: 李鹏翔\ntags: Golang\n---\n因为缺乏接口编程经验，所以一直对Interface理解有些困惑，觉得既然我继承来之后也要全部实现，那么为什么不直接自己定义这些方法？而且也不理解为什么说go语言的Interface设计是颠覆性的。\n刚才静下心来好好研究了一下接口以及实现案例，终于豁然开朗。\n<!-- more -->\n\n### 什么是接口（Interface）\n\n其实说白了，接口就是类与类之间的一种协议，统一一个标准。你要调用我，那你就必须实现我的这些方法。我不需要知道你是怎么实现的，但是你一定要实现。甚至在Objec-C当中都不叫interface，直接protocol。\n\n\n\n关于接口，知呼上有一个人是这么说的\n\n> 接口就是个招牌。\n>\n> 比如说你今年放假出去杭州旅游，玩了一上午，你也有点饿了，突然看到前面有个店子，上面挂着KFC，然后你就知道今天中饭有着落了。\n>\n> KFC就是接口，我们看到了这个接口，就知道这个店会卖炸鸡腿（实现接口）。\n>\n> 那么为神马我们要去定义一个接口涅，这个店可以直接卖炸鸡腿啊（直接写实现方法），是的，这个店可以直接卖炸鸡腿，但没有挂KFC的招牌，我们就不能直接简单粗暴的冲进去叫服务员给两个炸鸡腿了。\n>\n> 要么，我们就要进去问，你这里卖不卖炸鸡腿啊，卖不卖汉堡啊，卖不卖圣代啊（这就是反射）。很显然，这样一家家的问实在是非常麻烦（反射性能很差）。\n> 要么，我们就要记住，中山路108号卖炸鸡，黄山路45号卖炸鸡（硬编码），很显然这样我们要记住的很多很多东西（代码量剧增），而且，如果有新的店卖炸鸡腿，我们也不可能知道（不利于扩展）。\n>\n\n作者：[Ivony链接](https://www.zhihu.com/question/20111251/answer/16585393)\n\n\n\n### 到底有什么用？\n\n我相信不少刚接触interface的人会跟我有一样的疑惑，我实现接口跟不实现接口没什么区别啊？反正都要实现这些方法。\n\n问题的误区就在于，接口的使用并不是单人开发模式的。\n\n刚才那个知呼答案下面的一个不是特别高票的答案我感觉更能解释这个问题。\n\n> 你写接口你写实现，就不用写接口了。\n> 我写接口你实现，接口不就用上了。我不给你规定好了，你怎么知道该实现哪些内容呢。\n> 更进一步，我写接口你实现，你今天不在，我明天出差，程序后天交工，那我今天必须把调用这个接口的代码写好。所以就需要接口中有函数，有明确的函数签名。我写个接口，再把调用函数写好，明天你把接口实现了，传个实例进来，交工。\n> interface换个叫法就是contract，有点合同的意思。A实现了这个接口，代表A**承诺**能做某些事情。\n> B需要一些能做某些事情的东西，于是B要求，必须实现了A接口，才能被我调用。实际上也就是个“规范”。\n\n作者：[nonesuccess链接](https://www.zhihu.com/question/20111251/answer/36219434)\n\n用Go的文法举个例子，排序。\n\n```go\npackage main\nimport (\n    \"fmt\"\n)\ntype Sorter interface {\n    Len() int\n    Less(i, j int) bool\n    Swap(i, j int)\n}\ntype Xi []int\ntype Xs []string\n\nfunc (p Xi) Len() int               { return len(p) }\nfunc (p Xi) Less(i int, j int) bool { return p[j] < p[i] }\nfunc (p Xi) Swap(i int, j int)      { p[i], p[j] = p[j], p[i] }\n\nfunc (p Xs) Len() int               { return len(p) }\nfunc (p Xs) Less(i int, j int) bool { return p[j] < p[i] }\nfunc (p Xs) Swap(i int, j int)      { p[i], p[j] = p[j], p[i] }\n\nfunc Sort(x Sorter) {\n    for i := 0; i < x.Len()-1; i++ {\n        for j := i + 1; j < x.Len(); j++ {\n            if x.Less(i, j) {\n                x.Swap(i, j)\n            }\n        }\n    }\n}\nfunc main() {\n    ints := Xi{44, 67, 3, 17, 89, 10, 73, 9, 14, 8}\n    strings := Xs{\"nut\", \"ape\", \"elephant\", \"zoo\", \"go\"}\n    Sort(ints)\n    fmt.Printf(\"%v\\n\", ints)\n    Sort(strings)\n    fmt.Printf(\"%v\\n\", strings)\n}\n```\n\n这样看，是不是就理解接口的意义了。\n\n### Go语言接口为什么是颠覆性的？\n\n在其他编程语言当中，都是谁提供服务，谁提供接口。你需要调用我的服务，就必须声明你实现了我的接口。\n\n翻译成人话就是我的逻辑力调用了一堆不同功能的函数组织，然后通过一些特定逻辑完成了某个功能，别的模块想要调用我这个功能，就必须把我这个功能里使用的这些函数都给实现了。\n\n而这在逻辑上实际是说不通的，服务提供者怎么会确切的知道服务使用者的具体需求呢？当需求发生变化的时候，服务提供者就需要考虑使用者的需求，从而设计接口。而从理论上来说，每一个服务的开发人员都应该专注于自己的服务。\n\n而go语言不同。go语言的接口是**非侵入式接口**，只要调用者本身实现了该接口的全部方法，就默认实现了该接口（事实上也确实是实现了这个接口），而**不需要显示**的声明实现某个接口。这极大的方便了接口的调用，开发人员不必再需要苦想接口的粒度，只需要专注功能函数的实现就可以了。","slug":"Go语言关于Interface的理解与思考","published":1,"updated":"2017-04-15T10:32:29.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1j873c100097koeoh409ky5"},{"title":"HTTP协议详解（浏览器信息+服务器信息）","date":"2017-02-05T17:07:41.000Z","_content":"\n{%cq%}HTTP协议是Web工作的核心，所以要了解清楚Web的工作方式就需要详细的了解清楚HTTP是怎么样工作的。{%endcq%}\n\n<!-- more -->\n\n## HTTP协议详解\n\nHTTP协议是Web工作的核心，所以要了解清楚Web的工作方式就需要详细的了解清楚HTTP是怎么样工作的。\n\n>HTTP是一种让Web服务器与浏览器(客户端)通过Internet发送与接收数据的协议，它建立在TCP协议之上，一般采用TCP的80端口。\n\n它是一个请求、响应协议\n>客户端发出一个请求，服务器响应这个请求。在HTTP中，客户端总是通过建立一个连接与发送一个HTTP请求来发起一个事务。服务器不能主动去与客户端联系，也不能给客户端发出一个回调连接。客户端与服务器端都可以提前中断一个连接。\n\n例如，当浏览器下载一个文件时，你可以通过点击“停止”键来中断文件的下载，关闭与服务器的HTTP连接。\n\n**HTTP协议是无状态的**，同一个客户端的这次请求和上次请求是没有对应关系，对HTTP服务器来说，它并不知道这两个请求是否来自同一个客户端。为了解决这个问题，**Web程序引入了Cookie机制来维护连接的可持续状态**。\n\nHTTP协议是建立在TCP协议之上的，因此TCP攻击一样会影响HTTP的通讯，例如比较常见的一些攻击：SYN Flood是当前最流行的DoS(拒绝服务攻击)与DdoS(分布式拒绝服务攻击)的方式之一，这是一种利用TCP协议缺陷，发送大量伪造的TCP连接请求，从而使得被攻击方资源耗尽(CPU满负荷或内存不足)的攻击方式。\n\n### HTTP请求包(浏览器信息)\n\n我们先来看看Request包的结构，Request包分为3部分：\n\n- 第一部分叫Request line(请求行)\n- 第二部分叫Request header(请求头)\n- 第三部分是body(主体)。\n\nheader和body之间有个空行，请求包的例子所示:\n\n```\nGET /domains/example/ HTTP/1.1\n// 请求行 : 请求方法 请求 URI HTTP 协议 / 协议版本\nHost : www.iana.org\n// 服务端的主机名\nUser-Agent : Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.94\nAccept : text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\n// 客户端能接收的 mine\nAccept-Encoding : gzip,deflate,sdch\n// 是否支持流压缩\nAccept-Charset : UTF-8,*;q=0.5\n// 客户端字符编码集\n// 空行 , 用于分割请求头和消息体\n// 消息体 , 请求资源参数 , 例如 POST 传递的参数\n```\n我们通过fiddler抓包可以看到如下请求信息\n\n<center>\n\n![get](/images/post/20170206/get.png)\n\n抓取的Get信息\n\n![post](/images/post/20170206/post.png)\n\n抓取的Post信息</center>\n\n我们可以看到GET请求消息体为空,POST请求带有消息体 。\n\nHTTP协议定义了很多与服务器交互的请求方法，最基本的有4种：\n\n- GET\n\n- POST\n\n- PUT\n\n- DELETE\n\n一个URL地址用于描述一个网络上的资源，而HTTP中的GET， POST， PUT， DELETE就对应着对这个资源的查，改，增，删4个操作。 \n\n我们最常见的就是GET和POST了。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息。\n\n我们看看GET和POST的**区别**： \n\n1. GET提交的数据会放在URL之后,以?分割URL和传输数据,参数之间以&相连，\n\n   如EditPosts.aspx?name=test1&id=123456。\n\n   POST方法是把提交的数据放在HTTP包的Body中。 \n\n2. GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制。\n\n3. GET方式提交数据,会带来安全问题。\n\n   比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码。\n\n### HTTP响应包(服务器信息)\n\n我们再来看看HTTP的response包，他的结构如下:\n\n```\nHTTP/1.1 200 OK\n// 状态行\nServer: nginx/1.0.8\n// 服务器使用的 WEB 软件名及版本\nDate:Date: Tue， 30 Oct 2012 04:14:25 GMT\n// 发送时间\nContent-Type: text/html\n// 服务器发送信息的类型\nTransfer-Encoding: chunked\n// 表示发送 HTTP 包是分段发的\nConnection: keep-alive\n// 保持连接状态\nContent-Length: 90\n// 主体内容长度\n// 空行 用来分割消息头和主体\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"... // 消息体\n```\n\nResponse包中的第一行叫做状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。\n状态码用来告诉HTTP客户端，HTTP服务器是否产生了预期的Response。HTTP/1.1协议中定义了5类状态码， 状态码由三位数字组成，第一个数字定义了响应的类别。\n```\n1XX  //提示信息 - 表示请求已被成功接收，继续处理\n2XX  //成功 - 表示请求已被成功接收，理解，接受\n3XX  //重定向 - 要完成请求必须进行更进一步的处理\n4XX  //客户端错误 - 请求有语法错误或请求无法实现\n5XX  //服务器端错误 - 服务器未能实现合法的请求\n```\n我们看下面这个图展示了详细的返回信息，左边可以看到有很多的资源返回码，200是常用的，表示正常信息，302表示跳转。response header里面展示了详细的信息。\n![response](/images/post/20170206/response.png)\n\n### HTTP协议是无状态的和Connection: keep-alive的区别\n无状态是指协议对于事务处理没有记忆能力,服务器不知道客户端是什么状态。从另一方面讲，**打开一个服务器上的网页和你之前打开这个服务器上的网页之间没有任何联系**。\nHTTP是一个无状态的面向连接的协议，**无状态不代表HTTP不能保持TCP连接，更不能代表HTTP使用的是UDP协议(面对无连接)**。\n从HTTP/1.1起，默认都开启了Keep-Alive保持连接特性，简单地说，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的TCP连接。\nKeep-Alive不会永久保持连接，它有一个保持时间，可以在不同服务器软件(如Apache)中设置这个时间。","source":"_posts/HTTP协议详解.md","raw":"---\ntitle: HTTP协议详解（浏览器信息+服务器信息）\ndate: 2017-02-06 01:07:41\ntags: \n    - Http协议\n    - 爬虫\n---\n\n{%cq%}HTTP协议是Web工作的核心，所以要了解清楚Web的工作方式就需要详细的了解清楚HTTP是怎么样工作的。{%endcq%}\n\n<!-- more -->\n\n## HTTP协议详解\n\nHTTP协议是Web工作的核心，所以要了解清楚Web的工作方式就需要详细的了解清楚HTTP是怎么样工作的。\n\n>HTTP是一种让Web服务器与浏览器(客户端)通过Internet发送与接收数据的协议，它建立在TCP协议之上，一般采用TCP的80端口。\n\n它是一个请求、响应协议\n>客户端发出一个请求，服务器响应这个请求。在HTTP中，客户端总是通过建立一个连接与发送一个HTTP请求来发起一个事务。服务器不能主动去与客户端联系，也不能给客户端发出一个回调连接。客户端与服务器端都可以提前中断一个连接。\n\n例如，当浏览器下载一个文件时，你可以通过点击“停止”键来中断文件的下载，关闭与服务器的HTTP连接。\n\n**HTTP协议是无状态的**，同一个客户端的这次请求和上次请求是没有对应关系，对HTTP服务器来说，它并不知道这两个请求是否来自同一个客户端。为了解决这个问题，**Web程序引入了Cookie机制来维护连接的可持续状态**。\n\nHTTP协议是建立在TCP协议之上的，因此TCP攻击一样会影响HTTP的通讯，例如比较常见的一些攻击：SYN Flood是当前最流行的DoS(拒绝服务攻击)与DdoS(分布式拒绝服务攻击)的方式之一，这是一种利用TCP协议缺陷，发送大量伪造的TCP连接请求，从而使得被攻击方资源耗尽(CPU满负荷或内存不足)的攻击方式。\n\n### HTTP请求包(浏览器信息)\n\n我们先来看看Request包的结构，Request包分为3部分：\n\n- 第一部分叫Request line(请求行)\n- 第二部分叫Request header(请求头)\n- 第三部分是body(主体)。\n\nheader和body之间有个空行，请求包的例子所示:\n\n```\nGET /domains/example/ HTTP/1.1\n// 请求行 : 请求方法 请求 URI HTTP 协议 / 协议版本\nHost : www.iana.org\n// 服务端的主机名\nUser-Agent : Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.94\nAccept : text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\n// 客户端能接收的 mine\nAccept-Encoding : gzip,deflate,sdch\n// 是否支持流压缩\nAccept-Charset : UTF-8,*;q=0.5\n// 客户端字符编码集\n// 空行 , 用于分割请求头和消息体\n// 消息体 , 请求资源参数 , 例如 POST 传递的参数\n```\n我们通过fiddler抓包可以看到如下请求信息\n\n<center>\n\n![get](/images/post/20170206/get.png)\n\n抓取的Get信息\n\n![post](/images/post/20170206/post.png)\n\n抓取的Post信息</center>\n\n我们可以看到GET请求消息体为空,POST请求带有消息体 。\n\nHTTP协议定义了很多与服务器交互的请求方法，最基本的有4种：\n\n- GET\n\n- POST\n\n- PUT\n\n- DELETE\n\n一个URL地址用于描述一个网络上的资源，而HTTP中的GET， POST， PUT， DELETE就对应着对这个资源的查，改，增，删4个操作。 \n\n我们最常见的就是GET和POST了。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息。\n\n我们看看GET和POST的**区别**： \n\n1. GET提交的数据会放在URL之后,以?分割URL和传输数据,参数之间以&相连，\n\n   如EditPosts.aspx?name=test1&id=123456。\n\n   POST方法是把提交的数据放在HTTP包的Body中。 \n\n2. GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制。\n\n3. GET方式提交数据,会带来安全问题。\n\n   比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码。\n\n### HTTP响应包(服务器信息)\n\n我们再来看看HTTP的response包，他的结构如下:\n\n```\nHTTP/1.1 200 OK\n// 状态行\nServer: nginx/1.0.8\n// 服务器使用的 WEB 软件名及版本\nDate:Date: Tue， 30 Oct 2012 04:14:25 GMT\n// 发送时间\nContent-Type: text/html\n// 服务器发送信息的类型\nTransfer-Encoding: chunked\n// 表示发送 HTTP 包是分段发的\nConnection: keep-alive\n// 保持连接状态\nContent-Length: 90\n// 主体内容长度\n// 空行 用来分割消息头和主体\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"... // 消息体\n```\n\nResponse包中的第一行叫做状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。\n状态码用来告诉HTTP客户端，HTTP服务器是否产生了预期的Response。HTTP/1.1协议中定义了5类状态码， 状态码由三位数字组成，第一个数字定义了响应的类别。\n```\n1XX  //提示信息 - 表示请求已被成功接收，继续处理\n2XX  //成功 - 表示请求已被成功接收，理解，接受\n3XX  //重定向 - 要完成请求必须进行更进一步的处理\n4XX  //客户端错误 - 请求有语法错误或请求无法实现\n5XX  //服务器端错误 - 服务器未能实现合法的请求\n```\n我们看下面这个图展示了详细的返回信息，左边可以看到有很多的资源返回码，200是常用的，表示正常信息，302表示跳转。response header里面展示了详细的信息。\n![response](/images/post/20170206/response.png)\n\n### HTTP协议是无状态的和Connection: keep-alive的区别\n无状态是指协议对于事务处理没有记忆能力,服务器不知道客户端是什么状态。从另一方面讲，**打开一个服务器上的网页和你之前打开这个服务器上的网页之间没有任何联系**。\nHTTP是一个无状态的面向连接的协议，**无状态不代表HTTP不能保持TCP连接，更不能代表HTTP使用的是UDP协议(面对无连接)**。\n从HTTP/1.1起，默认都开启了Keep-Alive保持连接特性，简单地说，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的TCP连接。\nKeep-Alive不会永久保持连接，它有一个保持时间，可以在不同服务器软件(如Apache)中设置这个时间。","slug":"HTTP协议详解","published":1,"updated":"2017-04-15T10:32:29.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1j873c3000a7koeoy9artdc"},{"title":"MySQL备份与恢复","date":"2016-11-15T11:17:06.000Z","_content":"## 声明\n>本文整理自好友分享文档。\n\n>原作者：王绍晖\n>个人简介：腾云天下实习DBA\n\n<!-- more -->\n\n## binlog的解读\n\n- 查看binlog：\n    - mysqlbinlog -vv mysqlserver.00000[1-9]  \t#可以带正则表达式\n```\n# at 3871734  \t当前位置\n#160828 10:08:13 server id 2  end_log_pos 3871891  CRC32 0x796512ad\n时间点                服务器id           结束位置    校验码\nQuery\tthread_id=21\texec_time=0\terror_code=0\n        线程ID                           =0代表执行成功\n```\n```\n[root@localhost data]# mysqlbinlog --help\n --start-position=#\t\t开始位置\n --stop-position=# \t\t停止位置\n```\n\n## binlog自动切换的条件：\n- 达到阀值\n- 数据库重启会出现切换的情况\n- binlog强行切换：\n\n  `mysql> flush logs;`\t\n\n> 查看在使用的哪个日志，可以ls -t看时间\n\n## 关于日志的截取：\n- binlog的恢复：\n```\n[root@localhost data]# mysqlbinlog  --start-position=100  --stop-position= 8000 mysqlserver.00001[2-9]\t>a.a\n[root@localhost data]# cat a.a | mysql\n```\n\n## 逻辑备份和物理备份\n- 逻辑备份：将数据备份成一个文本文件（抽取数据行）\n1. 数据库必须是打开的状态\n2. 登陆数据库，将数据抽出来，导到一个文件里\n\n- 逻辑备份：mysqldump\n```\nUsage: mysqldump [OPTIONS] database [tables]\t\t某些表\nOR   mysqldump [OPTIONS] --databases [OPTIONS] DB1 [DB2 DB3...]\t  某些库\nOR   mysqldump [OPTIONS] --all-databases [OPTIONS]\t备份所有的库\n```\n```\noptions：\t\n-u \n-p\n-F：flush log  \t\t#恢复的时候直接从下一个日志开始就可以了\n-l：lock tables  \t#数据的一致性，在备份的期间，myisam表是不能用的\n--single-transaction \t\t#影响innodb表的，不锁表和行\n-fields-terminated-by=name \t\t#列和列之间的分隔符\n                      Fields in the output file are terminated by the given  string.\n--fields-enclosed-by=name \n                      Fields in the output file are enclosed by the given character.\n--fields-optionally-enclosed-by=name \n                      Fields in the output file are optionally enclosed by the given character.\n--fields-escaped-by=name \n                      Fields in the output file are escaped by the given\n\n-T, --tab=name      Create tab-separated textfile for each table to given\t#指定tab键为分隔符\n```\n```\n[root@localhost tmp]# mysqldump -uroot -p -l -F  --single-transaction -T /tmp -S /usr/local/mysql/data/mysql.sock test t1 >t1.txt\t#文件名必须与表的名字一致，否则没有内容；-T指定那个文件夹，这条命令就要到哪个文件夹下面执行\n[root@localhost tmp]# cat t1.txt \n1\ta\n2\tb\n3\tc\n4\te\n```\n\n- 备份一张表：\n  `mysqldump -uroot -p -l -F --single-transaction -S /usr/local/mysql/data/mysql.sock test t1 >aa.sql`\n\n- 恢复一张表：\n  `cat aa.sql | mysql -uroot -p123123 -S /usr/local/mysql/data/mysql.sock test`\n\n### 关注的点：\n> 备份出来的数据对应的binlog的日志起点\n> 备份时候要把表给锁住，对myisam来说，备份期间锁住的表是不能用的；对innodb来说，不锁表，在备份期间结合MVCC和undo把开始备份时刻和备份完成时刻之间的数据恢复\n\n\n\n## 物理备份---xtrabackup\nxtrabackup既可以备份myisam表也可以备份innodb表\n物理备份：可以认为是cp，备份的是数据文件页和里面的数据页\n- 冷备：数据库关闭，把数据库相关的文件cp出来\n- 热备：数据库开启，使用相关的工具将数据备份出来\n\n> 不管物理或逻辑，必须知道你备份的点，能跟binlog连起来的，备份恢复的时候，binlog 的起点必须是你备份的那个点\n\n1. 建立一个备份目录，注意：属主属组一定要是mysql\n2. 备份数据库：将相关的数据文件拷贝出来\n\n```\n[root@localhost ~]# innobackupex --user=root --password=123123  --socket=/usr/local/mysql/data/mysql.sock --port 3307 --no-timestamp  /backup/\t\t#不建立一个时间戳的目录\n这个命令默认会去找rpm安装的mysql，最好把rpm安装的mysql配置文件名字改一下\n成功的话在最后会有一个complete\n```\n\n- backup里面相关文件：\n```\n[root@localhost ~]# ll /backup/\ntotal 77860\n-rw-r-----. 1 root root      387 Sep  8 17:22 backup-my.cnf\n-rw-r-----. 1 root root 79691776 Sep  8 17:21 ibdata1\ndrwx------. 2 root root     4096 Sep  8 17:22 mysql\ndrwx------. 2 root root     4096 Sep  8 17:22 performance_schema\ndrwx------. 2 root root     4096 Sep  8 17:22 test\ndrwx------. 2 root root     4096 Sep  8 17:22 tpcc1000\n-rw-r-----. 1 root root       23 Sep  8 17:22 xtrabackup_binlog_info\n-rw-r-----. 1 root root      119 Sep  8 17:22 xtrabackup_checkpoints\n-rw-r-----. 1 root root      538 Sep  8 17:22 xtrabackup_info\n-rw-r-----. 1 root root     2560 Sep  8 17:22 xtrabackup_logfile\n```\n\n> xtrabackup_logfile：在备份期间产生的redo log，从log file里面取出来，放到这个文件里。\n```\nxtrabackup_info：\nstart_time = 2016-09-08 17:21:16\nend_time = 2016-09-08 17:22:37\nlock_time = 0\nbinlog_pos = filename 'mysqlserver.000023', position '120'\t#binlog位置，从哪里开始备\ninnodb_from_lsn = 0\t#每一个数据页都有一个lsn号，这两行表示全备（方便增备）\ninnodb_to_lsn = 3171620346\nxtrabackup_binlog_info：mysqlserver.000023\t120\nxtrabackup_checkpoints：backup_type = full-backuped\t#代表全备\t\n```\n- 模拟环境：删除一张表\n\n    - apply-log\n```\n[root@localhost backup]# innobackupex --apply-log /backup/\t\t#apply-log带着一个隐藏的rollback，如果不想roll back加上--redo-only\n！！！一定要看到一个complete\n[root@localhost backup]# cat xtrabackup_checkpoints\nbackup_type = full-prepared\t\t#不仅是全备而且apply log了\n```\n\n- 关闭数据库，删除数据库（注意：一定不要删除binlog）\n  将binlog从里面移出来，注意不要放到backup下面，否则一会恢复的时候binlog页都给恢复了，这个是不需要的。\n\n\n- 恢复数据库：就是把backup下面的文件再拷贝回去\n```\n[root@localhost backup]# innobackupex --defaults-file=/etc/mysla.cnf  --copy-back /backup/\t#注意：最好指定配置文件，有的会报如下错误\n```\n\n- 文件拷贝完成记得一定要修改datadir下面文件的属主和属组，重启数据库\n\n- 跑binlog：\n  起始位置以及哪个binlog：xtrabackup_info 记录在这个文件里\n  终点位置需要我们自己去找：mysqlbinlog -vv mysqlserver.000023 | grep -i \"drop\" -C 100\t\t\n```\n[root@localhost binlog]# cat a.sql | mysql -uroot -p -S /usr/local/mysql/data/mysql.sock \nEnter password: \n```\n- 跑binlog的时候去监控：show processlist---是实时变化的\n\n\n\n## mysql启动流程分析：\n1. cat /etc/my.cnf   \t文件是否存在，文件内容是否正确，主要看datadir\n2. 看datadir的权限\n3. 进入datadir，看里面的内容是否齐全：ibdata1，ib_logfile，mysql，performation_scheme,information_scheme\n4. 确认一下errorlog，pid文件，sock文件，\n5. mysql_safe --defaults-file=/etc/my.cnf  &\n6. ps -ef | grep mysqld\n   7. tail -100f errorlog\n7. 登陆mysql -uroot -p -h127.0.0.1 或者mysql -uroot -p -S /.../...sock\n\n\n## 备份方案：\n1. 备份期间会产生大量的IO，qps和tps都会大幅度的下降，从某种意义来说，在备份期间，数据库基本没法用\n2. 将备份的文件传走(传到从库)：对IO和网络带宽产生负载\n3. 恢复的时间：恢复的时候，binlog跑得特别慢，生产做业务的时候是并发执行的，恢复的时候只有一个线程在跑\n\n   - 需要考虑的点：\n4. 备份对生产的影响,备份和数据传输\n5. 备份的恢复时间\n\n### 对于恢复的时间的计算\n> 恢复时间=备份拷贝回来的时间（IO和网络带宽）+跑binlog的时间（不太容易计算，需要实际测试）\n### 注意\n- binlog的恢复时间非常不可控，binlog中有的sql语句特别慢，甚至跑的时候跑不动\n\n## 增量备份\n主要是对innodb而言的，对于myisam和其他的表还是一个全拷贝。\n每个数据页都会有一个lsn号，每产生一次变化，lsn都会发生改变。\n- 增量备份\n    - 备份的是发生变化的页（这些数据页指的是LSN大于xtrabackup_checkpoints中给定的LSN），增备是基于全备的，第一次的增备的数据必须基于上一次的全备。\n- 增量备份的过程：\n    - 缺点：要把所有的页都扫描一遍才能知道哪些页发生变化，所以备份的时候对库的压力并没有变小，只是备份出来的数据量有可能变少了\n    - 好处：恢复的时候是可控的，可以把增量apply到全备里面；备份完成之后就可以apply到全备里面去，不是非要等到恢复的时候再apply。\n- 模拟完全+增量+prepare\n1. 完全备份,备份完记得apply log\n2. 建立一个增备的文件并修改权限\n\n```\n[root@localhost backup]# mkdir /back_inr\n[root@localhost backup]# chown -R mysql:mysql /back_inr/\n```\n- 第一次增量备份（增量备份还是希望有时间戳的）\n```\n[root@localhost ~]# innobackupex --user=root --password=123123 --socket=/usr/local/mysql/data/mysql.sock --incremental /back_inr/ --incremental-basedir=/backup/\n```\n\n- 第二次增量备份（和第一次执行的命令大致相同，只有他的--incremental-basedir应该指向上一次的增量备份所在的目录）\n```\n[root@localhost back_inr]# innobackupex --user=root --password=123123 --socket=/usr/local/mysql/data/mysql.sock --incremental /back_inr/ --incremental-basedir=/back_inr/2016-09-09_08-50-13/\n```\n\n- 把增量prepare到全备里面去,只要有增量就要一直redo-only\n```\n[root@localhost ~]# innobackupex --socket=/usr/local/mysql/data/mysql.sock   --user=root --password=123123 --apply-log-only --redo-only  /backup/ --incremental-dir=/back_inr/2016-09-09_08-50-13/ \t\n```\n\n- 跑binlog\n  起点在xtrbackup_binlog_info里面找\n\n\n### copy-back和move-back的区别：\n如果备份和数据库所在的是一个文件系统，move-back的时候其实就是给了一个名字，速度非常的快\n\n\n\n## innobackupex参数详解：\n[--compress]和[--compress-threads=NUMBER-OF-THREADS]：备份的时候压缩非常消耗CPU，压的时候可以加大cpu的力度\n[--encrypt=ENCRYPTION-ALGORITHM] ：备份有加密的需求\n--no-timestamp：备份完之后不生成时间戳\n--compact：优化，所有表上的二级索引不备份\n\n--parallel=NUMBER-OF-FORKS：只支持全备，备份的时候可以用并发（并行）的方式去备份（在带宽足够的条件下，可以大量的减少备份的时间）\n--throttle=#  阀值，\n限流：限制流量，控制他的IO使用量，降低对主库使用的影响，不要对生产产生影响\n--safe-slave-backup：停止对从库的更新，然后进行备份，这样备份非常快。\n--log-copy-interval=# ：每隔多长时间记录一下日志\n--kill-long-queries-timeout=#：如果系统里有一个长事务一直未提交，加锁加不上，那么备份的时候就会hang住，等多长时间事务不提交加不上锁的话就把他杀死\n--ftwrl-wait-timeout=# \n--no-lock：在备份期间不加锁\n使用这个参数要保证在备份期间：\n没有DDL（会导致数据不一致）\n没有对myisam表的更新\n--redo-only  ：This is necessary if the backup  will have incremental changes applied to it later. 只要后面还有增量就一定要加上redo-only\n\n- log scan up to：\n  在备份的过程中会有大量的log scan up to：不断的记日志，数据页不断的更新；说明我读到的这个数据页在不断的更新。\n\n## ！！！注意\n- 备份期间innodb表也会短时间的加锁，最好在从库上备份，并且暂停主库对从库的更新\n\n\n\n## 表的导入导出\n- 一般都是基于表的。\n### 导出：两种方式\n- 1.select ... into outfile  options\n```\noptions：\n\nmysql> select * from t3 into outfile \"/data/1.txt\" fields terminated by ',';\t#注意权限的问题\n\nmysql> select * from t3 into outfile \"/data/1.txt\" fields terminated by ',' lines terminated by '..........';\n\nmysql> select * from t3 into outfile \"/data/1.txt\" fields terminated by ','  enclosed by '\"';\n\nmysql> select * from t3 into outfile \"/data/1.txt\" fields terminated by ','  optionally  enclosed by '\"\n```\n```\nmysql> insert into t4 values(1,'\\tdasd');\t\t#插入一行数据以tab分隔\nmysql> select * from t4 into outfile \"/data/1.txt\" fields terminated by ','  escaped by '\\\\';';\t\t#只在个别的字符类型上加引用符\n```\n\n- 2.mysqldump -T\n```\nmysqldump -u username- T  target_ dir dbname  tablename  [option] \n```\n### 导入：load data\n- load data\n  load比insert into速度要快好多，批量导入\n  mysql >LOAD DATA  [LOCAL]  INFILE  'filename'  INTO  TABLE tablename [option] \n- mysqlimport\n  Shell> mysqlimport -u root  -p***  [--LOCAL]  dbname order_tab.txt  [option] \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/MySQL备份与恢复.md","raw":"---\ntitle: MySQL备份与恢复\ndate: 2016-11-15 19:17:06\ntags: MySQL\n---\n## 声明\n>本文整理自好友分享文档。\n\n>原作者：王绍晖\n>个人简介：腾云天下实习DBA\n\n<!-- more -->\n\n## binlog的解读\n\n- 查看binlog：\n    - mysqlbinlog -vv mysqlserver.00000[1-9]  \t#可以带正则表达式\n```\n# at 3871734  \t当前位置\n#160828 10:08:13 server id 2  end_log_pos 3871891  CRC32 0x796512ad\n时间点                服务器id           结束位置    校验码\nQuery\tthread_id=21\texec_time=0\terror_code=0\n        线程ID                           =0代表执行成功\n```\n```\n[root@localhost data]# mysqlbinlog --help\n --start-position=#\t\t开始位置\n --stop-position=# \t\t停止位置\n```\n\n## binlog自动切换的条件：\n- 达到阀值\n- 数据库重启会出现切换的情况\n- binlog强行切换：\n\n  `mysql> flush logs;`\t\n\n> 查看在使用的哪个日志，可以ls -t看时间\n\n## 关于日志的截取：\n- binlog的恢复：\n```\n[root@localhost data]# mysqlbinlog  --start-position=100  --stop-position= 8000 mysqlserver.00001[2-9]\t>a.a\n[root@localhost data]# cat a.a | mysql\n```\n\n## 逻辑备份和物理备份\n- 逻辑备份：将数据备份成一个文本文件（抽取数据行）\n1. 数据库必须是打开的状态\n2. 登陆数据库，将数据抽出来，导到一个文件里\n\n- 逻辑备份：mysqldump\n```\nUsage: mysqldump [OPTIONS] database [tables]\t\t某些表\nOR   mysqldump [OPTIONS] --databases [OPTIONS] DB1 [DB2 DB3...]\t  某些库\nOR   mysqldump [OPTIONS] --all-databases [OPTIONS]\t备份所有的库\n```\n```\noptions：\t\n-u \n-p\n-F：flush log  \t\t#恢复的时候直接从下一个日志开始就可以了\n-l：lock tables  \t#数据的一致性，在备份的期间，myisam表是不能用的\n--single-transaction \t\t#影响innodb表的，不锁表和行\n-fields-terminated-by=name \t\t#列和列之间的分隔符\n                      Fields in the output file are terminated by the given  string.\n--fields-enclosed-by=name \n                      Fields in the output file are enclosed by the given character.\n--fields-optionally-enclosed-by=name \n                      Fields in the output file are optionally enclosed by the given character.\n--fields-escaped-by=name \n                      Fields in the output file are escaped by the given\n\n-T, --tab=name      Create tab-separated textfile for each table to given\t#指定tab键为分隔符\n```\n```\n[root@localhost tmp]# mysqldump -uroot -p -l -F  --single-transaction -T /tmp -S /usr/local/mysql/data/mysql.sock test t1 >t1.txt\t#文件名必须与表的名字一致，否则没有内容；-T指定那个文件夹，这条命令就要到哪个文件夹下面执行\n[root@localhost tmp]# cat t1.txt \n1\ta\n2\tb\n3\tc\n4\te\n```\n\n- 备份一张表：\n  `mysqldump -uroot -p -l -F --single-transaction -S /usr/local/mysql/data/mysql.sock test t1 >aa.sql`\n\n- 恢复一张表：\n  `cat aa.sql | mysql -uroot -p123123 -S /usr/local/mysql/data/mysql.sock test`\n\n### 关注的点：\n> 备份出来的数据对应的binlog的日志起点\n> 备份时候要把表给锁住，对myisam来说，备份期间锁住的表是不能用的；对innodb来说，不锁表，在备份期间结合MVCC和undo把开始备份时刻和备份完成时刻之间的数据恢复\n\n\n\n## 物理备份---xtrabackup\nxtrabackup既可以备份myisam表也可以备份innodb表\n物理备份：可以认为是cp，备份的是数据文件页和里面的数据页\n- 冷备：数据库关闭，把数据库相关的文件cp出来\n- 热备：数据库开启，使用相关的工具将数据备份出来\n\n> 不管物理或逻辑，必须知道你备份的点，能跟binlog连起来的，备份恢复的时候，binlog 的起点必须是你备份的那个点\n\n1. 建立一个备份目录，注意：属主属组一定要是mysql\n2. 备份数据库：将相关的数据文件拷贝出来\n\n```\n[root@localhost ~]# innobackupex --user=root --password=123123  --socket=/usr/local/mysql/data/mysql.sock --port 3307 --no-timestamp  /backup/\t\t#不建立一个时间戳的目录\n这个命令默认会去找rpm安装的mysql，最好把rpm安装的mysql配置文件名字改一下\n成功的话在最后会有一个complete\n```\n\n- backup里面相关文件：\n```\n[root@localhost ~]# ll /backup/\ntotal 77860\n-rw-r-----. 1 root root      387 Sep  8 17:22 backup-my.cnf\n-rw-r-----. 1 root root 79691776 Sep  8 17:21 ibdata1\ndrwx------. 2 root root     4096 Sep  8 17:22 mysql\ndrwx------. 2 root root     4096 Sep  8 17:22 performance_schema\ndrwx------. 2 root root     4096 Sep  8 17:22 test\ndrwx------. 2 root root     4096 Sep  8 17:22 tpcc1000\n-rw-r-----. 1 root root       23 Sep  8 17:22 xtrabackup_binlog_info\n-rw-r-----. 1 root root      119 Sep  8 17:22 xtrabackup_checkpoints\n-rw-r-----. 1 root root      538 Sep  8 17:22 xtrabackup_info\n-rw-r-----. 1 root root     2560 Sep  8 17:22 xtrabackup_logfile\n```\n\n> xtrabackup_logfile：在备份期间产生的redo log，从log file里面取出来，放到这个文件里。\n```\nxtrabackup_info：\nstart_time = 2016-09-08 17:21:16\nend_time = 2016-09-08 17:22:37\nlock_time = 0\nbinlog_pos = filename 'mysqlserver.000023', position '120'\t#binlog位置，从哪里开始备\ninnodb_from_lsn = 0\t#每一个数据页都有一个lsn号，这两行表示全备（方便增备）\ninnodb_to_lsn = 3171620346\nxtrabackup_binlog_info：mysqlserver.000023\t120\nxtrabackup_checkpoints：backup_type = full-backuped\t#代表全备\t\n```\n- 模拟环境：删除一张表\n\n    - apply-log\n```\n[root@localhost backup]# innobackupex --apply-log /backup/\t\t#apply-log带着一个隐藏的rollback，如果不想roll back加上--redo-only\n！！！一定要看到一个complete\n[root@localhost backup]# cat xtrabackup_checkpoints\nbackup_type = full-prepared\t\t#不仅是全备而且apply log了\n```\n\n- 关闭数据库，删除数据库（注意：一定不要删除binlog）\n  将binlog从里面移出来，注意不要放到backup下面，否则一会恢复的时候binlog页都给恢复了，这个是不需要的。\n\n\n- 恢复数据库：就是把backup下面的文件再拷贝回去\n```\n[root@localhost backup]# innobackupex --defaults-file=/etc/mysla.cnf  --copy-back /backup/\t#注意：最好指定配置文件，有的会报如下错误\n```\n\n- 文件拷贝完成记得一定要修改datadir下面文件的属主和属组，重启数据库\n\n- 跑binlog：\n  起始位置以及哪个binlog：xtrabackup_info 记录在这个文件里\n  终点位置需要我们自己去找：mysqlbinlog -vv mysqlserver.000023 | grep -i \"drop\" -C 100\t\t\n```\n[root@localhost binlog]# cat a.sql | mysql -uroot -p -S /usr/local/mysql/data/mysql.sock \nEnter password: \n```\n- 跑binlog的时候去监控：show processlist---是实时变化的\n\n\n\n## mysql启动流程分析：\n1. cat /etc/my.cnf   \t文件是否存在，文件内容是否正确，主要看datadir\n2. 看datadir的权限\n3. 进入datadir，看里面的内容是否齐全：ibdata1，ib_logfile，mysql，performation_scheme,information_scheme\n4. 确认一下errorlog，pid文件，sock文件，\n5. mysql_safe --defaults-file=/etc/my.cnf  &\n6. ps -ef | grep mysqld\n   7. tail -100f errorlog\n7. 登陆mysql -uroot -p -h127.0.0.1 或者mysql -uroot -p -S /.../...sock\n\n\n## 备份方案：\n1. 备份期间会产生大量的IO，qps和tps都会大幅度的下降，从某种意义来说，在备份期间，数据库基本没法用\n2. 将备份的文件传走(传到从库)：对IO和网络带宽产生负载\n3. 恢复的时间：恢复的时候，binlog跑得特别慢，生产做业务的时候是并发执行的，恢复的时候只有一个线程在跑\n\n   - 需要考虑的点：\n4. 备份对生产的影响,备份和数据传输\n5. 备份的恢复时间\n\n### 对于恢复的时间的计算\n> 恢复时间=备份拷贝回来的时间（IO和网络带宽）+跑binlog的时间（不太容易计算，需要实际测试）\n### 注意\n- binlog的恢复时间非常不可控，binlog中有的sql语句特别慢，甚至跑的时候跑不动\n\n## 增量备份\n主要是对innodb而言的，对于myisam和其他的表还是一个全拷贝。\n每个数据页都会有一个lsn号，每产生一次变化，lsn都会发生改变。\n- 增量备份\n    - 备份的是发生变化的页（这些数据页指的是LSN大于xtrabackup_checkpoints中给定的LSN），增备是基于全备的，第一次的增备的数据必须基于上一次的全备。\n- 增量备份的过程：\n    - 缺点：要把所有的页都扫描一遍才能知道哪些页发生变化，所以备份的时候对库的压力并没有变小，只是备份出来的数据量有可能变少了\n    - 好处：恢复的时候是可控的，可以把增量apply到全备里面；备份完成之后就可以apply到全备里面去，不是非要等到恢复的时候再apply。\n- 模拟完全+增量+prepare\n1. 完全备份,备份完记得apply log\n2. 建立一个增备的文件并修改权限\n\n```\n[root@localhost backup]# mkdir /back_inr\n[root@localhost backup]# chown -R mysql:mysql /back_inr/\n```\n- 第一次增量备份（增量备份还是希望有时间戳的）\n```\n[root@localhost ~]# innobackupex --user=root --password=123123 --socket=/usr/local/mysql/data/mysql.sock --incremental /back_inr/ --incremental-basedir=/backup/\n```\n\n- 第二次增量备份（和第一次执行的命令大致相同，只有他的--incremental-basedir应该指向上一次的增量备份所在的目录）\n```\n[root@localhost back_inr]# innobackupex --user=root --password=123123 --socket=/usr/local/mysql/data/mysql.sock --incremental /back_inr/ --incremental-basedir=/back_inr/2016-09-09_08-50-13/\n```\n\n- 把增量prepare到全备里面去,只要有增量就要一直redo-only\n```\n[root@localhost ~]# innobackupex --socket=/usr/local/mysql/data/mysql.sock   --user=root --password=123123 --apply-log-only --redo-only  /backup/ --incremental-dir=/back_inr/2016-09-09_08-50-13/ \t\n```\n\n- 跑binlog\n  起点在xtrbackup_binlog_info里面找\n\n\n### copy-back和move-back的区别：\n如果备份和数据库所在的是一个文件系统，move-back的时候其实就是给了一个名字，速度非常的快\n\n\n\n## innobackupex参数详解：\n[--compress]和[--compress-threads=NUMBER-OF-THREADS]：备份的时候压缩非常消耗CPU，压的时候可以加大cpu的力度\n[--encrypt=ENCRYPTION-ALGORITHM] ：备份有加密的需求\n--no-timestamp：备份完之后不生成时间戳\n--compact：优化，所有表上的二级索引不备份\n\n--parallel=NUMBER-OF-FORKS：只支持全备，备份的时候可以用并发（并行）的方式去备份（在带宽足够的条件下，可以大量的减少备份的时间）\n--throttle=#  阀值，\n限流：限制流量，控制他的IO使用量，降低对主库使用的影响，不要对生产产生影响\n--safe-slave-backup：停止对从库的更新，然后进行备份，这样备份非常快。\n--log-copy-interval=# ：每隔多长时间记录一下日志\n--kill-long-queries-timeout=#：如果系统里有一个长事务一直未提交，加锁加不上，那么备份的时候就会hang住，等多长时间事务不提交加不上锁的话就把他杀死\n--ftwrl-wait-timeout=# \n--no-lock：在备份期间不加锁\n使用这个参数要保证在备份期间：\n没有DDL（会导致数据不一致）\n没有对myisam表的更新\n--redo-only  ：This is necessary if the backup  will have incremental changes applied to it later. 只要后面还有增量就一定要加上redo-only\n\n- log scan up to：\n  在备份的过程中会有大量的log scan up to：不断的记日志，数据页不断的更新；说明我读到的这个数据页在不断的更新。\n\n## ！！！注意\n- 备份期间innodb表也会短时间的加锁，最好在从库上备份，并且暂停主库对从库的更新\n\n\n\n## 表的导入导出\n- 一般都是基于表的。\n### 导出：两种方式\n- 1.select ... into outfile  options\n```\noptions：\n\nmysql> select * from t3 into outfile \"/data/1.txt\" fields terminated by ',';\t#注意权限的问题\n\nmysql> select * from t3 into outfile \"/data/1.txt\" fields terminated by ',' lines terminated by '..........';\n\nmysql> select * from t3 into outfile \"/data/1.txt\" fields terminated by ','  enclosed by '\"';\n\nmysql> select * from t3 into outfile \"/data/1.txt\" fields terminated by ','  optionally  enclosed by '\"\n```\n```\nmysql> insert into t4 values(1,'\\tdasd');\t\t#插入一行数据以tab分隔\nmysql> select * from t4 into outfile \"/data/1.txt\" fields terminated by ','  escaped by '\\\\';';\t\t#只在个别的字符类型上加引用符\n```\n\n- 2.mysqldump -T\n```\nmysqldump -u username- T  target_ dir dbname  tablename  [option] \n```\n### 导入：load data\n- load data\n  load比insert into速度要快好多，批量导入\n  mysql >LOAD DATA  [LOCAL]  INFILE  'filename'  INTO  TABLE tablename [option] \n- mysqlimport\n  Shell> mysqlimport -u root  -p***  [--LOCAL]  dbname order_tab.txt  [option] \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"MySQL备份与恢复","published":1,"updated":"2017-04-15T10:32:29.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1j873c6000d7koe48l8yhyg"},{"title":"Python线程池的实现","date":"2017-02-07T09:10:33.000Z","_content":"\n面试了Python开发，对于多线程的理解还是有不少问题。恶补了一下午，跟着Demo做了一个线程池，还是能达到效果。\n\n<!-- more -->\n\n\n\n```python\n#coding:utf8\nimport Queue\nimport sys\nimport threading\nimport traceback\n\n\n# 定义一些Exception，用于自定义异常处理\n\nclass NoResultsPending(Exception):\n    \"\"\"All works requests have been processed\"\"\"\n    pass\n\n\nclass NoWorkersAvailable(Exception):\n    \"\"\"No worket threads available to process remaining requests.\"\"\"\n    pass\n\n\ndef _handle_thread_exception(request, exc_info):\n    \"\"\"默认的异常处理函数，只是简单的打印\"\"\"\n    traceback.print_exception(*exc_info)\n\n\n# classes\n\nclass WorkerThread(threading.Thread):\n    \"\"\"后台线程，真正的工作线程，从请求队列(requestQueue)中获取work，\n    并将执行后的结果添加到结果队列(resultQueue)\"\"\"\n\n    def __init__(self, requestQueue, resultQueue, poll_timeout=5, **kwds):\n        threading.Thread.__init__(self, **kwds)\n        '''设置为守护进行'''\n        self.setDaemon(True)\n        self._requestQueue = requestQueue\n        self._resultQueue = resultQueue\n        self._poll_timeout = poll_timeout\n        '''设置一个flag信号，用来表示该线程是否还被dismiss,默认为false'''\n        self._dismissed = threading.Event()\n        self.start()\n\n    def run(self):\n        '''每个线程尽可能多的执行work，所以采用loop，\n        只要线程可用，并且requestQueue有work未完成，则一直loop'''\n        while True:\n            if self._dismissed.is_set():\n                break\n            try:\n                '''\n                Queue.Queue队列设置了线程同步策略，并且可以设置timeout。\n                一直block，直到requestQueue有值，或者超时\n                '''\n                request = self._requestQueue.get(True, self._poll_timeout)\n            except Queue.Empty:\n                continue\n            else:\n                '''之所以在这里再次判断dimissed，是因为之前的timeout时间里，很有可能，该线程被dismiss掉了'''\n                if self._dismissed.is_set():\n                    self._requestQueue.put(request)\n                    break\n                try:\n                    '''执行callable，讲请求和结果以tuple的方式放入requestQueue'''\n                    result = request.callable(*request.args, **request.kwds)\n                    print self.getName()\n                    self._resultQueue.put((request, result))\n                except:\n                    '''异常处理'''\n                    request.exception = True\n                    self._resultQueue.put((request, sys.exc_info()))\n\n    def dismiss(self):\n        '''设置一个标志，表示完成当前work之后，退出'''\n        self._dismissed.set()\n\n\nclass WorkRequest:\n    '''\n    @param callable_:，可定制的，执行work的函数\n    @param args: 列表参数\n    @param kwds: 字典参数\n    @param requestID: id\n    @param callback: 可定制的，处理resultQueue队列元素的函数\n    @param exc_callback:可定制的，处理异常的函数\n    '''\n\n    def __init__(self, callable_, args=None, kwds=None, requestID=None,\n                 callback=None, exc_callback=_handle_thread_exception):\n        if requestID == None:\n            self.requestID = id(self)\n        else:\n            try:\n                self.requestID = hash(requestID)\n            except TypeError:\n                raise TypeError(\"requestId must be hashable\")\n        self.exception = False\n        self.callback = callback\n        self.exc_callback = exc_callback\n        self.callable = callable_\n        self.args = args or []\n        self.kwds = kwds or {}\n\n    def __str__(self):\n        return \"WorkRequest id=%s args=%r kwargs=%r exception=%s\" % \\\n               (self.requestID, self.args, self.kwds, self.exception)\n\n\nclass ThreadPool:\n    '''\n    @param num_workers:初始化的线程数量\n    @param q_size,resq_size: requestQueue和result队列的初始大小\n    @param poll_timeout: 设置工作线程WorkerThread的timeout，也就是等待requestQueue的timeout\n    '''\n\n    def __init__(self, num_workers, q_size=0, resq_size=0, poll_timeout=5):\n        self._requestQueue = Queue.Queue(q_size)\n        self._resultQueue = Queue.Queue(resq_size)\n        self.workers = []\n        self.dismissedWorkers = []\n        self.workRequests = {}  # 设置个字典，方便使用\n        self.createWorkers(num_workers, poll_timeout)\n\n    def createWorkers(self, num_workers, poll_timeout=5):\n        '''创建num_workers个WorkThread,默认timeout为5'''\n        for i in range(num_workers):\n            self.workers.append(WorkerThread(self._requestQueue, self._resultQueue, poll_timeout=poll_timeout))\n\n    def dismissWorkers(self, num_workers, do_join=False):\n        '''停用num_workers数量的线程，并加入dismiss_list'''\n        dismiss_list = []\n        for i in range(min(num_workers, len(self.workers))):\n            worker = self.workers.pop()\n            worker.dismiss()\n            dismiss_list.append(worker)\n        if do_join:\n            for worker in dismiss_list:\n                worker.join()\n        else:\n            self.dismissedWorkers.extend(dismiss_list)\n\n    def joinAllDismissedWorkers(self):\n        '''join 所有停用的thread'''\n        # print len(self.dismissedWorkers)\n        for worker in self.dismissedWorkers:\n            worker.join()\n        self.dismissedWorkers = []\n\n    def putRequest(self, request, block=True, timeout=None):\n        assert isinstance(request, WorkRequest)\n        assert not getattr(request, 'exception', None)\n        '''当queue满了，也就是容量达到了前面设定的q_size,它将一直阻塞，直到有空余位置，或是timeout'''\n        self._requestQueue.put(request, block, timeout)\n        self.workRequests[request.requestID] = request\n\n    def poll(self, block=False):\n        while True:\n            if not self.workRequests:\n                raise NoResultsPending\n            elif block and not self.workers:\n                raise NoWorkersAvailable\n            try:\n                '''默认只要resultQueue有值，则取出，否则一直block'''\n                request, result = self._resultQueue.get(block=block)\n                if request.exception and request.exc_callback:\n                    request.exc_callback(request, result)\n                if request.callback and not (request.exception and request.exc_callback):\n                    request.callback(request, result)\n                del self.workRequests[request.requestID]\n            except Queue.Empty:\n                break\n\n    def wait(self):\n        while True:\n            try:\n                self.poll(True)\n            except NoResultsPending:\n                break\n\n    def workersize(self):\n        return len(self.workers)\n\n    def stop(self):\n        '''join 所有的thread,确保所有的线程都执行完毕'''\n        self.dismissWorkers(self.workersize(), True)\n        self.joinAllDismissedWorkers()\n\n\n# 测试代码\nif __name__ == '__main__':\n    import random\n    import time\n    import datetime\n\n\n    def do_work(data):\n        time.sleep(random.randint(1, 3))\n        res = str(datetime.datetime.now()) + \"\" + str(data)\n        return res\n\n\n    def print_result(request, result):\n        print \"---Result from request %s : %r\" % (request.requestID, result)\n\n\n    main = ThreadPool(3)\n    for i in range(40):\n        req = WorkRequest(do_work, args=[i], kwds={}, callback=print_result)\n        main.putRequest(req)\n        print \"work request #%s added.\" % req.requestID\n\n    print '-' * 20, main.workersize(), '-' * 20\n\n    counter = 0\n    while True:\n        try:\n            time.sleep(0.5)\n            main.poll()\n            if (counter == 5):\n                print \"Add 3 more workers threads\"\n                main.createWorkers(3)\n                print '-' * 20, main.workersize(), '-' * 20\n            if (counter == 10):\n                print \"dismiss 2 workers threads\"\n                main.dismissWorkers(2)\n                print '-' * 20, main.workersize(), '-' * 20\n            counter += 1\n        except NoResultsPending:\n            print \"no pending results\"\n            break\n\n    main.stop()\n    print \"Stop\"\n```","source":"_posts/Python线程池的实现.md","raw":"---\ntitle: Python线程池的实现\ndate: 2017-02-07 17:10:33\ntags: Python\n---\n\n面试了Python开发，对于多线程的理解还是有不少问题。恶补了一下午，跟着Demo做了一个线程池，还是能达到效果。\n\n<!-- more -->\n\n\n\n```python\n#coding:utf8\nimport Queue\nimport sys\nimport threading\nimport traceback\n\n\n# 定义一些Exception，用于自定义异常处理\n\nclass NoResultsPending(Exception):\n    \"\"\"All works requests have been processed\"\"\"\n    pass\n\n\nclass NoWorkersAvailable(Exception):\n    \"\"\"No worket threads available to process remaining requests.\"\"\"\n    pass\n\n\ndef _handle_thread_exception(request, exc_info):\n    \"\"\"默认的异常处理函数，只是简单的打印\"\"\"\n    traceback.print_exception(*exc_info)\n\n\n# classes\n\nclass WorkerThread(threading.Thread):\n    \"\"\"后台线程，真正的工作线程，从请求队列(requestQueue)中获取work，\n    并将执行后的结果添加到结果队列(resultQueue)\"\"\"\n\n    def __init__(self, requestQueue, resultQueue, poll_timeout=5, **kwds):\n        threading.Thread.__init__(self, **kwds)\n        '''设置为守护进行'''\n        self.setDaemon(True)\n        self._requestQueue = requestQueue\n        self._resultQueue = resultQueue\n        self._poll_timeout = poll_timeout\n        '''设置一个flag信号，用来表示该线程是否还被dismiss,默认为false'''\n        self._dismissed = threading.Event()\n        self.start()\n\n    def run(self):\n        '''每个线程尽可能多的执行work，所以采用loop，\n        只要线程可用，并且requestQueue有work未完成，则一直loop'''\n        while True:\n            if self._dismissed.is_set():\n                break\n            try:\n                '''\n                Queue.Queue队列设置了线程同步策略，并且可以设置timeout。\n                一直block，直到requestQueue有值，或者超时\n                '''\n                request = self._requestQueue.get(True, self._poll_timeout)\n            except Queue.Empty:\n                continue\n            else:\n                '''之所以在这里再次判断dimissed，是因为之前的timeout时间里，很有可能，该线程被dismiss掉了'''\n                if self._dismissed.is_set():\n                    self._requestQueue.put(request)\n                    break\n                try:\n                    '''执行callable，讲请求和结果以tuple的方式放入requestQueue'''\n                    result = request.callable(*request.args, **request.kwds)\n                    print self.getName()\n                    self._resultQueue.put((request, result))\n                except:\n                    '''异常处理'''\n                    request.exception = True\n                    self._resultQueue.put((request, sys.exc_info()))\n\n    def dismiss(self):\n        '''设置一个标志，表示完成当前work之后，退出'''\n        self._dismissed.set()\n\n\nclass WorkRequest:\n    '''\n    @param callable_:，可定制的，执行work的函数\n    @param args: 列表参数\n    @param kwds: 字典参数\n    @param requestID: id\n    @param callback: 可定制的，处理resultQueue队列元素的函数\n    @param exc_callback:可定制的，处理异常的函数\n    '''\n\n    def __init__(self, callable_, args=None, kwds=None, requestID=None,\n                 callback=None, exc_callback=_handle_thread_exception):\n        if requestID == None:\n            self.requestID = id(self)\n        else:\n            try:\n                self.requestID = hash(requestID)\n            except TypeError:\n                raise TypeError(\"requestId must be hashable\")\n        self.exception = False\n        self.callback = callback\n        self.exc_callback = exc_callback\n        self.callable = callable_\n        self.args = args or []\n        self.kwds = kwds or {}\n\n    def __str__(self):\n        return \"WorkRequest id=%s args=%r kwargs=%r exception=%s\" % \\\n               (self.requestID, self.args, self.kwds, self.exception)\n\n\nclass ThreadPool:\n    '''\n    @param num_workers:初始化的线程数量\n    @param q_size,resq_size: requestQueue和result队列的初始大小\n    @param poll_timeout: 设置工作线程WorkerThread的timeout，也就是等待requestQueue的timeout\n    '''\n\n    def __init__(self, num_workers, q_size=0, resq_size=0, poll_timeout=5):\n        self._requestQueue = Queue.Queue(q_size)\n        self._resultQueue = Queue.Queue(resq_size)\n        self.workers = []\n        self.dismissedWorkers = []\n        self.workRequests = {}  # 设置个字典，方便使用\n        self.createWorkers(num_workers, poll_timeout)\n\n    def createWorkers(self, num_workers, poll_timeout=5):\n        '''创建num_workers个WorkThread,默认timeout为5'''\n        for i in range(num_workers):\n            self.workers.append(WorkerThread(self._requestQueue, self._resultQueue, poll_timeout=poll_timeout))\n\n    def dismissWorkers(self, num_workers, do_join=False):\n        '''停用num_workers数量的线程，并加入dismiss_list'''\n        dismiss_list = []\n        for i in range(min(num_workers, len(self.workers))):\n            worker = self.workers.pop()\n            worker.dismiss()\n            dismiss_list.append(worker)\n        if do_join:\n            for worker in dismiss_list:\n                worker.join()\n        else:\n            self.dismissedWorkers.extend(dismiss_list)\n\n    def joinAllDismissedWorkers(self):\n        '''join 所有停用的thread'''\n        # print len(self.dismissedWorkers)\n        for worker in self.dismissedWorkers:\n            worker.join()\n        self.dismissedWorkers = []\n\n    def putRequest(self, request, block=True, timeout=None):\n        assert isinstance(request, WorkRequest)\n        assert not getattr(request, 'exception', None)\n        '''当queue满了，也就是容量达到了前面设定的q_size,它将一直阻塞，直到有空余位置，或是timeout'''\n        self._requestQueue.put(request, block, timeout)\n        self.workRequests[request.requestID] = request\n\n    def poll(self, block=False):\n        while True:\n            if not self.workRequests:\n                raise NoResultsPending\n            elif block and not self.workers:\n                raise NoWorkersAvailable\n            try:\n                '''默认只要resultQueue有值，则取出，否则一直block'''\n                request, result = self._resultQueue.get(block=block)\n                if request.exception and request.exc_callback:\n                    request.exc_callback(request, result)\n                if request.callback and not (request.exception and request.exc_callback):\n                    request.callback(request, result)\n                del self.workRequests[request.requestID]\n            except Queue.Empty:\n                break\n\n    def wait(self):\n        while True:\n            try:\n                self.poll(True)\n            except NoResultsPending:\n                break\n\n    def workersize(self):\n        return len(self.workers)\n\n    def stop(self):\n        '''join 所有的thread,确保所有的线程都执行完毕'''\n        self.dismissWorkers(self.workersize(), True)\n        self.joinAllDismissedWorkers()\n\n\n# 测试代码\nif __name__ == '__main__':\n    import random\n    import time\n    import datetime\n\n\n    def do_work(data):\n        time.sleep(random.randint(1, 3))\n        res = str(datetime.datetime.now()) + \"\" + str(data)\n        return res\n\n\n    def print_result(request, result):\n        print \"---Result from request %s : %r\" % (request.requestID, result)\n\n\n    main = ThreadPool(3)\n    for i in range(40):\n        req = WorkRequest(do_work, args=[i], kwds={}, callback=print_result)\n        main.putRequest(req)\n        print \"work request #%s added.\" % req.requestID\n\n    print '-' * 20, main.workersize(), '-' * 20\n\n    counter = 0\n    while True:\n        try:\n            time.sleep(0.5)\n            main.poll()\n            if (counter == 5):\n                print \"Add 3 more workers threads\"\n                main.createWorkers(3)\n                print '-' * 20, main.workersize(), '-' * 20\n            if (counter == 10):\n                print \"dismiss 2 workers threads\"\n                main.dismissWorkers(2)\n                print '-' * 20, main.workersize(), '-' * 20\n            counter += 1\n        except NoResultsPending:\n            print \"no pending results\"\n            break\n\n    main.stop()\n    print \"Stop\"\n```","slug":"Python线程池的实现","published":1,"updated":"2017-04-15T10:32:29.095Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1j873ca000f7koedwh05qg2"},{"title":"Hello World","date":"2017-02-03T13:19:43.000Z","_content":"> 这是Hexo项目自带的`Hello world`，这次就不删除了。有兴趣的同学可以自己折腾一下，挺好玩儿的。我的博客现在的样式是魔改的NexT主题，国人制作，我做了一些小修改。\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2017-02-03 21:19:43\ntags: Hexo\n---\n> 这是Hexo项目自带的`Hello world`，这次就不删除了。有兴趣的同学可以自己折腾一下，挺好玩儿的。我的博客现在的样式是魔改的NexT主题，国人制作，我做了一些小修改。\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2017-04-15T10:32:29.092Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1j873cc000i7koerh9p0oxe"},{"title":"Ubuntu16.04 安装hexo方法","date":"2017-02-23T03:32:48.000Z","_content":"{%cq%}\n\nUbuntu16.04 安装nodejs的时候，在PATH当中的bin文件的名称是nodejs，而不是node，所以导致常规方法安装hexo失败。这里介绍一下具体的操作方法。\n{%endcq%}\n\n<!-- more -->\n\n##  第一步：安装git\n\n```shell\nsudo apt install git\n```\n\n## 第二步：安装nodejs相关\n\n```shell\nsudo apt install nodejs npm\n```\n\n## 第三步：创建node软连接\n\n```shell\nsudo ln -s /usr/bin/nodejs /usr/bin/node\n```\n\n## 第四步：安装hexo\n\n``` shell\nsudo npm i -g hexo hexo-cli\n```\n\n## 第五步：验证\n\n```shell\n➜  ~ hexo\nUsage: hexo <command>\n\nCommands:\n  help     Get help on a command.\n  init     Create a new Hexo folder.\n  version  Display version information.\n\nGlobal Options:\n  --config  Specify config file instead of using _config.yml\n  --cwd     Specify the CWD\n  --debug   Display all verbose messages in the terminal\n  --draft   Display draft posts\n  --safe    Disable all plugins and scripts\n  --silent  Hide output on console\n\nFor more help, you can use 'hexo help [command]' for the detailed information\nor you can check the docs: http://hexo.io/docs/\n\n```\n\n\n\n这样基本就安装成功了。\n","source":"_posts/Ubuntu16-04-安装hexo方法.md","raw":"---\ntitle: Ubuntu16.04 安装hexo方法\ndate: 2017-02-23 11:32:48\ntags: \n    - 博客相关\n    - hexo\n---\n{%cq%}\n\nUbuntu16.04 安装nodejs的时候，在PATH当中的bin文件的名称是nodejs，而不是node，所以导致常规方法安装hexo失败。这里介绍一下具体的操作方法。\n{%endcq%}\n\n<!-- more -->\n\n##  第一步：安装git\n\n```shell\nsudo apt install git\n```\n\n## 第二步：安装nodejs相关\n\n```shell\nsudo apt install nodejs npm\n```\n\n## 第三步：创建node软连接\n\n```shell\nsudo ln -s /usr/bin/nodejs /usr/bin/node\n```\n\n## 第四步：安装hexo\n\n``` shell\nsudo npm i -g hexo hexo-cli\n```\n\n## 第五步：验证\n\n```shell\n➜  ~ hexo\nUsage: hexo <command>\n\nCommands:\n  help     Get help on a command.\n  init     Create a new Hexo folder.\n  version  Display version information.\n\nGlobal Options:\n  --config  Specify config file instead of using _config.yml\n  --cwd     Specify the CWD\n  --debug   Display all verbose messages in the terminal\n  --draft   Display draft posts\n  --safe    Disable all plugins and scripts\n  --silent  Hide output on console\n\nFor more help, you can use 'hexo help [command]' for the detailed information\nor you can check the docs: http://hexo.io/docs/\n\n```\n\n\n\n这样基本就安装成功了。\n","slug":"Ubuntu16-04-安装hexo方法","published":1,"updated":"2017-04-15T10:32:29.095Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1j873ce000j7koe6xzl99n7"},{"title":"抱歉，我又把我的博客拆了","date":"2017-02-03T17:19:43.000Z","_content":"这是第二次发生这样的事情了，不过这次破坏是我有预谋的，大部分文章在移动硬盘里都有备份，我会尽快恢复。\n\n### 原因说明\n其实事情是这样的，之前用hexo的时候为了方便直接用hexo自带的git同步工具生成静态文件push到我的GitHub Page，但是后来我的笔记本硬盘挂了（还好备份了文章...），直接导致我的项目源码没了。所有的Markdown文本都丢了。一堆静态文件也没有用，导致后来我更新文章的时候是直接修改HTML页面来传文章。\n写起来非常困难不说，手动改格式排版什么的也非常的难看。再加上之前自己一个人负责一个比较大的项目，我的内心实际上是崩溃的。\n\n### 目前状态\n首先是两个情况：\n1. 之前的文章有保存备份，但是第一次崩溃的备份由于没有还原，可能都丢了。我还没有查我的移动硬盘，不过估计恢复的可能性不大。\n2. 新年新气象。丁酉年离职，所以现在有更多的时间来积累。接下来MySQL的东西可能会更新的比较少，主要关注点在Python和Go这两个方向。博客内容也基本以开发为主。\n\n### 最后\n感谢大(zi)家(ji)去年的支持与鼓励。\n","source":"_posts/抱歉，我又把我的博客拆了.md","raw":"---\ntitle: 抱歉，我又把我的博客拆了\ndate: 2017-02-04 01:19:43\ntags: 博客通知\n---\n这是第二次发生这样的事情了，不过这次破坏是我有预谋的，大部分文章在移动硬盘里都有备份，我会尽快恢复。\n\n### 原因说明\n其实事情是这样的，之前用hexo的时候为了方便直接用hexo自带的git同步工具生成静态文件push到我的GitHub Page，但是后来我的笔记本硬盘挂了（还好备份了文章...），直接导致我的项目源码没了。所有的Markdown文本都丢了。一堆静态文件也没有用，导致后来我更新文章的时候是直接修改HTML页面来传文章。\n写起来非常困难不说，手动改格式排版什么的也非常的难看。再加上之前自己一个人负责一个比较大的项目，我的内心实际上是崩溃的。\n\n### 目前状态\n首先是两个情况：\n1. 之前的文章有保存备份，但是第一次崩溃的备份由于没有还原，可能都丢了。我还没有查我的移动硬盘，不过估计恢复的可能性不大。\n2. 新年新气象。丁酉年离职，所以现在有更多的时间来积累。接下来MySQL的东西可能会更新的比较少，主要关注点在Python和Go这两个方向。博客内容也基本以开发为主。\n\n### 最后\n感谢大(zi)家(ji)去年的支持与鼓励。\n","slug":"抱歉，我又把我的博客拆了","published":1,"updated":"2017-04-15T10:32:29.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1j873ci000l7koetzyngmir"},{"title":"一个Python调用Shell时遇到的问题","date":"2017-03-07T10:50:15.000Z","_content":"\n{% cq %}\n\n​\t关于Python调用Shell时的一些之前没有注意过得问题。问题很简单，但是比较容易忽略。\n\n{% endcq%}\n\n<!-- more -->\n\n## 问题背景\n\n前两天老大扔我一个脚本让我看一下这个脚本有没有什么bug，大体流程是这样的：\n\n```python\nimport commands \ndef exectue_shell(cmd,times = 1):\n    result_code = commands.getoutput(cmd)\n    if result_code !=0 and times > 0:\n        result_code = commands.getoutput(cmd)\n        times -= 1\n        exectue_shell(cmd,times)\n    else:\n        return False\n```\n\n意思就是执行cmd命令，然后如果没有执行成功，就再执行一次，如果还是失败就退出。\n\n我看了一下说，应该没什么问题吧。\n\n老大说，不对，有BUG，执行的时候，一个单进程的脚本竟然开启了好几个子进程，这明显是不科学的。\n\n## 问题溯源\n\n听到这个问题我第一反应就是执行的线程没有结束，可是明明已经获取了返回值。\n\n那这就说明了另一个问题，commands包的getoutput函数是不阻塞的。\n\n然后，我就去看了getoutput的实现。\n\n```python\ndef getoutput(cmd):\n    \"\"\"Return output (stdout or stderr) of executing cmd in a shell.\"\"\"\n    return getstatusoutput(cmd)[1]\n```\n\n```python\ndef getstatusoutput(cmd):\n    \"\"\"Return (status, output) of executing cmd in a shell.\"\"\"\n    import os\n    pipe = os.popen('{ ' + cmd + '; } 2>&1', 'r')\n    text = pipe.read()\n    sts = pipe.close()\n    if sts is None: sts = 0\n    if text[-1:] == '\\n': text = text[:-1]\n    return sts, text\n```\n\n然后可以很清楚的看到，getoutput方法的背后调用的实际上是os模块的popen，开启了一个管道，然后单方面的关闭了。\n\n所以结论就是：\n\n> 子线程执行的任务需要的时间较长，父线程没有在超时时间内等待到子线程的返回值，既返回None，导致父线程认为子线程执行失败，重启子线程。然而子线程并没有失败，依然在内存中运行。所以导致出现非常多子线程的出现。\n\n这个问题的原因就出现了。\n\n## 问题解决\n\n那么如何解决这个问题，思路就一个，保证父线程会等待子线程的执行结束，或者子线程会阻塞父线程。\n\nPyton执行Shell命令一般有以下这几种方法：\n\n- commands.getoutput(command)\n- os.system(command)\n- os.popen(command,mode)\n- subprocess模块\n\n其中os.system可以做到线程阻塞，这个模块是用C实现的，先是fork了一个子线程，然后父线程回waitpid，缺点是返回值并不是真实的返回值（但0是0）。\n\nsubprocess模块的call()方法也可以打到线程阻塞的效果，但是调用的时候命令参数是以list的形式传入，对命令不是非常友好。\n\n所以最后换成os.system去执行命令，就成功了。","source":"_posts/一个Python调用Shell时遇到的问题.md","raw":"---\ntitle: 一个Python调用Shell时遇到的问题\ndate: 2017-03-07 18:50:15\ntags: \n      - Python\n      - Shell\n---\n\n{% cq %}\n\n​\t关于Python调用Shell时的一些之前没有注意过得问题。问题很简单，但是比较容易忽略。\n\n{% endcq%}\n\n<!-- more -->\n\n## 问题背景\n\n前两天老大扔我一个脚本让我看一下这个脚本有没有什么bug，大体流程是这样的：\n\n```python\nimport commands \ndef exectue_shell(cmd,times = 1):\n    result_code = commands.getoutput(cmd)\n    if result_code !=0 and times > 0:\n        result_code = commands.getoutput(cmd)\n        times -= 1\n        exectue_shell(cmd,times)\n    else:\n        return False\n```\n\n意思就是执行cmd命令，然后如果没有执行成功，就再执行一次，如果还是失败就退出。\n\n我看了一下说，应该没什么问题吧。\n\n老大说，不对，有BUG，执行的时候，一个单进程的脚本竟然开启了好几个子进程，这明显是不科学的。\n\n## 问题溯源\n\n听到这个问题我第一反应就是执行的线程没有结束，可是明明已经获取了返回值。\n\n那这就说明了另一个问题，commands包的getoutput函数是不阻塞的。\n\n然后，我就去看了getoutput的实现。\n\n```python\ndef getoutput(cmd):\n    \"\"\"Return output (stdout or stderr) of executing cmd in a shell.\"\"\"\n    return getstatusoutput(cmd)[1]\n```\n\n```python\ndef getstatusoutput(cmd):\n    \"\"\"Return (status, output) of executing cmd in a shell.\"\"\"\n    import os\n    pipe = os.popen('{ ' + cmd + '; } 2>&1', 'r')\n    text = pipe.read()\n    sts = pipe.close()\n    if sts is None: sts = 0\n    if text[-1:] == '\\n': text = text[:-1]\n    return sts, text\n```\n\n然后可以很清楚的看到，getoutput方法的背后调用的实际上是os模块的popen，开启了一个管道，然后单方面的关闭了。\n\n所以结论就是：\n\n> 子线程执行的任务需要的时间较长，父线程没有在超时时间内等待到子线程的返回值，既返回None，导致父线程认为子线程执行失败，重启子线程。然而子线程并没有失败，依然在内存中运行。所以导致出现非常多子线程的出现。\n\n这个问题的原因就出现了。\n\n## 问题解决\n\n那么如何解决这个问题，思路就一个，保证父线程会等待子线程的执行结束，或者子线程会阻塞父线程。\n\nPyton执行Shell命令一般有以下这几种方法：\n\n- commands.getoutput(command)\n- os.system(command)\n- os.popen(command,mode)\n- subprocess模块\n\n其中os.system可以做到线程阻塞，这个模块是用C实现的，先是fork了一个子线程，然后父线程回waitpid，缺点是返回值并不是真实的返回值（但0是0）。\n\nsubprocess模块的call()方法也可以打到线程阻塞的效果，但是调用的时候命令参数是以list的形式传入，对命令不是非常友好。\n\n所以最后换成os.system去执行命令，就成功了。","slug":"一个Python调用Shell时遇到的问题","published":1,"updated":"2017-04-15T10:32:29.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1j873cl000n7koeg670j1wy"},{"title":"Python文件编码自动转换模块的实现","date":"2017-02-04T03:04:48.000Z","_content":"{% cq %}Python跨平台处理文本的坑我就先踩了。{% endcq %}\n<!-- more -->\n\n## 基础知识\n### 操作系统默认编码\n操作系统|默认编码\n---|---\nWindows|GBK\nMacOS|Unicode\nLinux|UTF8\n\n### Python文件转码模式\n> 源编码 --decode-->> Unicode编码 --encode-->> 目标编码\n\nPython在处理字符串的时候，使用decode会将字符串解码成Unicode编码，然后再按照指定编码进行encode，就可对文本进行编码处理。\n\n## chardet的使用\n```python\n# 获取文件编码\ncode_style = chardet.detect(f.read()).get('encoding')\n\n# chardet.detect(f.read())获得的返回值为一个字典，包含文件编码与可信度。\n# 数据越长得到的编码可信度越高，进行解码的正确的可能性就越高。\n```\n\n## 坑，大坑\n1. MacOS生成的文件默认的编码为Unicode，在使用chardet进行编码识别的时候，会识别成UTF16-LTE而不是想当然的Unicode。\n2. Mac的编辑器带的BOM，Python在进行处理的时候并不会忽略，所以直接decode会报错\n3. 查不到资料的。\n\n\n## 自制文件转码模块\n```python\n# coding:utf8\n\nimport re\nimport chardet\nimport os\n\n\n# 文件落盘\ndef save_file_to_disk(f, fp):\n    # 重置文件对象指针\n    f.seek(0, os.SEEK_SET)\n    try:\n        new_file = open(fp, 'wb+')\n        new_file.write(f.read())\n        new_file.close()\n        return True\n    except Exception, e:\n        print e\n        return False\n\n\n# 文件转码为utf8\ndef change_file_to_utf8(fp):\n    files = os.listdir(fp)\n    for f in files:\n        path = os.path.join(fp, f)\n        f_reader = open(path, 'rb')\n        # 获取文件编码\n        code_style = chardet.detect(f_reader.read()).get('encoding')\n        # 重置文件对象指针\n        f_reader.seek(0, os.SEEK_SET)\n        content_change = []\n        # 获取内容开始转码\n        try:\n            # 针对mac进行处理\n            if code_style == 'UTF-16LE':\n                content_change = f_reader.read().decode('utf16', 'ignore').encode('utf8')\n            else:\n                content_change = f_reader.read().decode(code_style).encode('utf8')\n        except Exception, e:\n            print u\"转码失败\"\n            print u\"编码为%s\" % code_style\n            print str(e)\n\n        with open(path, 'w') as newFile:\n            newFile.writelines(content_change)\n            newFile.close()\n```\n\n","source":"_posts/文件编码自动转换模块的实现.md","raw":"---\ntitle: Python文件编码自动转换模块的实现\ndate: 2017-02-04 11:04:48\ntags: Python\n---\n{% cq %}Python跨平台处理文本的坑我就先踩了。{% endcq %}\n<!-- more -->\n\n## 基础知识\n### 操作系统默认编码\n操作系统|默认编码\n---|---\nWindows|GBK\nMacOS|Unicode\nLinux|UTF8\n\n### Python文件转码模式\n> 源编码 --decode-->> Unicode编码 --encode-->> 目标编码\n\nPython在处理字符串的时候，使用decode会将字符串解码成Unicode编码，然后再按照指定编码进行encode，就可对文本进行编码处理。\n\n## chardet的使用\n```python\n# 获取文件编码\ncode_style = chardet.detect(f.read()).get('encoding')\n\n# chardet.detect(f.read())获得的返回值为一个字典，包含文件编码与可信度。\n# 数据越长得到的编码可信度越高，进行解码的正确的可能性就越高。\n```\n\n## 坑，大坑\n1. MacOS生成的文件默认的编码为Unicode，在使用chardet进行编码识别的时候，会识别成UTF16-LTE而不是想当然的Unicode。\n2. Mac的编辑器带的BOM，Python在进行处理的时候并不会忽略，所以直接decode会报错\n3. 查不到资料的。\n\n\n## 自制文件转码模块\n```python\n# coding:utf8\n\nimport re\nimport chardet\nimport os\n\n\n# 文件落盘\ndef save_file_to_disk(f, fp):\n    # 重置文件对象指针\n    f.seek(0, os.SEEK_SET)\n    try:\n        new_file = open(fp, 'wb+')\n        new_file.write(f.read())\n        new_file.close()\n        return True\n    except Exception, e:\n        print e\n        return False\n\n\n# 文件转码为utf8\ndef change_file_to_utf8(fp):\n    files = os.listdir(fp)\n    for f in files:\n        path = os.path.join(fp, f)\n        f_reader = open(path, 'rb')\n        # 获取文件编码\n        code_style = chardet.detect(f_reader.read()).get('encoding')\n        # 重置文件对象指针\n        f_reader.seek(0, os.SEEK_SET)\n        content_change = []\n        # 获取内容开始转码\n        try:\n            # 针对mac进行处理\n            if code_style == 'UTF-16LE':\n                content_change = f_reader.read().decode('utf16', 'ignore').encode('utf8')\n            else:\n                content_change = f_reader.read().decode(code_style).encode('utf8')\n        except Exception, e:\n            print u\"转码失败\"\n            print u\"编码为%s\" % code_style\n            print str(e)\n\n        with open(path, 'w') as newFile:\n            newFile.writelines(content_change)\n            newFile.close()\n```\n\n","slug":"文件编码自动转换模块的实现","published":1,"updated":"2017-04-15T10:32:29.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1j873cp000q7koetuvlylfk"},{"title":"深刻理解Python中的元类（metaclass）","date":"2017-02-06T03:20:36.000Z","_content":"\n这是一篇在[Stack overflow](http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python)上很热的帖子。提问者自称已经掌握了有关Python OOP编程中的各种概念，但始终觉得元类(metaclass)难以理解。他知道这肯定和自省有关，但仍然觉得不太明白，希望大家可以给出一些实际的例子和代码片段以帮助理解，以及在什么情况下需要进行元编程。于是e-satis同学给出了神一般的回复，该回复获得了985点的赞同点数，更有人评论说这段回复应该加入到Python的官方文档中去。而e-satis同学本人在Stack Overflow中的声望积分也高达64271分。以下就是这篇精彩的回复。（提示：非常长）\n\n<!-- more -->\n\n## **类也是对象**\n\n在理解元类之前，你需要先掌握Python中的类。Python中类的概念借鉴于Smalltalk，这显得有些奇特。在大多数编程语言中，类就是一组用来描述如何生成一个对象的代码段。在Python中这一点仍然成立：\n\n```Python\n>>> class ObjectCreator(object):\n…       pass\n…\n>>> my_object = ObjectCreator()\n>>> print my_object\n<__main__.ObjectCreator object at 0x8974f2c>\n```\n\n\n\n但是，Python中的类还远不止如此。类同样也是一种对象。是的，没错，就是对象。只要你使用关键字class，Python解释器在执行的时候就会创建一个对象。下面的代码段：\n\n```Python\n>>> class ObjectCreator(object):\n…       pass\n…\n```\n\n\n\n将在内存中创建一个对象，名字就是ObjectCreator。**这个对象（类）自身拥有创建对象（类实例）的能力，而这就是为什么它是一个类的原因。**但是，它的本质仍然是一个对象，于是乎你可以对它做如下的操作：\n\n1. 你可以将它赋值给一个变量\n2. 你可以拷贝它\n3. 你可以为它增加属性\n4. 你可以将它作为函数参数进行传递\n\n下面是示例：\n\n```Python\n>>> print ObjectCreator     # 你可以打印一个类，因为它其实也是一个对象\n<class '__main__.ObjectCreator'>\n>>> def echo(o):\n…       print o\n…\n>>> echo(ObjectCreator)                 # 你可以将类做为参数传给函数\n<class '__main__.ObjectCreator'>\n>>> print hasattr(ObjectCreator, 'new_attribute')\nFasle\n>>> ObjectCreator.new_attribute = 'foo' #  你可以为类增加属性\n>>> print hasattr(ObjectCreator, 'new_attribute')\nTrue\n>>> print ObjectCreator.new_attribute\nfoo\n>>> ObjectCreatorMirror = ObjectCreator # 你可以将类赋值给一个变量\n>>> print ObjectCreatorMirror()\n<__main__.ObjectCreator object at 0x8997b4c>\n```\n\n\n\n## **动态地创建类**\n\n因为类也是对象，你可以在运行时动态的创建它们，就像其他任何对象一样。首先，你可以在函数中创建类，使用class关键字即可。\n\n```Python\n>>> def choose_class(name):\n…       if name == 'foo':\n…           class Foo(object):\n…               pass\n…           return Foo     # 返回的是类，不是类的实例\n…       else:\n…           class Bar(object):\n…               pass\n…           return Bar\n…\n>>> MyClass = choose_class('foo')\n>>> print MyClass              # 函数返回的是类，不是类的实例\n<class '__main__'.Foo>\n>>> print MyClass()            # 你可以通过这个类创建类实例，也就是对象\n<__main__.Foo object at 0x89c6d4c>\n```\n\n\n\n但这还不够动态，因为你仍然需要自己编写整个类的代码。由于类也是对象，所以它们必须是通过什么东西来生成的才对。当你使用class关键字时，Python解释器自动创建这个对象。但就和Python中的大多数事情一样，Python仍然提供给你手动处理的方法。还记得内建函数type吗？这个古老但强大的函数能够让你知道一个对象的类型是什么，就像这样：\n\n```Python\n>>> print type(1)\n<type 'int'>\n>>> print type(\"1\")\n<type 'str'>\n>>> print type(ObjectCreator)\n<type 'type'>\n>>> print type(ObjectCreator())\n<class '__main__.ObjectCreator'>\n```\n\n\n\n这里，type有一种完全不同的能力，它也能动态的创建类。type可以接受一个类的描述作为参数，然后返回一个类。（我知道，根据传入参数的不同，同一个函数拥有两种完全不同的用法是一件很傻的事情，但这在Python中是为了保持向后兼容性）\n\ntype可以像这样工作：\n\n```Python\ntype(类名, 父类的元组（针对继承的情况，可以为空），包含属性的字典（名称和值）)\n```\n\n\n\n比如下面的代码：\n\n```Python\n\n>>> class MyShinyClass(object):\n…       pass\n```\n\n可以手动像这样创建：\n\n```Python\n>>> MyShinyClass = type('MyShinyClass', (), {})  # 返回一个类对象\n>>> print MyShinyClass\n<class '__main__.MyShinyClass'>\n>>> print MyShinyClass()  #  创建一个该类的实例\n<__main__.MyShinyClass object at 0x8997cec>\n```\n\n你会发现我们使用“MyShinyClass”作为类名，并且也可以把它当做一个变量来作为类的引用。类和变量是不同的，这里没有任何理由把事情弄的复杂。\n\ntype 接受一个字典来为类定义属性，因此\n\n```Python\n>>> class Foo(object):\n…       bar = True\n```\n\n\n\n可以翻译为：\n\n```Python\n>>> Foo = type('Foo', (), {'bar':True})\n```\n\n\n\n并且可以将Foo当成一个普通的类一样使用：\n\n```Python\n>>> print Foo\n<class '__main__.Foo'>\n>>> print Foo.bar\nTrue\n>>> f = Foo()\n>>> print f\n<__main__.Foo object at 0x8a9b84c>\n>>> print f.bar\nTrue\n```\n\n\n\n当然，你可以向这个类继承，所以，如下的代码：\n\n```Python\n>>> class FooChild(Foo):\n…       pass\n```\n\n就可以写成：\n\n```Python\n>>> FooChild = type('FooChild', (Foo,),{})\n>>> print FooChild\n<class '__main__.FooChild'>\n>>> print FooChild.bar   # bar属性是由Foo继承而来\nTrue\n```\n\n\n\n最终你会希望为你的类增加方法。只需要定义一个有着恰当签名的函数并将其作为属性赋值就可以了。\n\n```Python\n>>> def echo_bar(self):\n…       print self.bar\n…\n>>> FooChild = type('FooChild', (Foo,), {'echo_bar': echo_bar})\n>>> hasattr(Foo, 'echo_bar')\nFalse\n>>> hasattr(FooChild, 'echo_bar')\nTrue\n>>> my_foo = FooChild()\n>>> my_foo.echo_bar()\nTrue\n```\n\n\n\n你可以看到，在Python中，类也是对象，你可以动态的创建类。这就是当你使用关键字class时Python在幕后做的事情，而这就是通过元类来实现的。\n\n \n\n## **到底什么是元类（终于到主题了）**\n\n元类就是用来创建类的“东西”。你创建类就是为了创建类的实例对象，不是吗？但是我们已经学习到了Python中的类也是对象。好吧，元类就是用来创建这些类（对象）的，元类就是类的类，你可以这样理解 为：\n\n```Python\nMyClass = MetaClass()\nMyObject = MyClass()\n```\n\n\n\n你已经看到了type可以让你像这样做：\n\n```Python\nMyClass = type('MyClass', (), {})\n```\n\n\n\n这是因为函数type实际上是一个元类。type就是Python在背后用来创建所有类的元类。现在你想知道那为什么type会全部采用小写形式而不是Type呢？好吧，我猜这是为了和str保持一致性，str是用来创建字符串对象的类，而int是用来创建整数对象的类。type就是创建类对象的类。你可以通过检查__class__属性来看到这一点。Python中所有的东西，注意，我是指所有的东西——都是对象。这包括整数、字符串、函数以及类。它们全部都是对象，而且它们都是从一个类创建而来。\n\n```Python\n>>> age = 35\n>>> age.__class__\n<type 'int'>\n>>> name = 'bob'\n>>> name.__class__\n<type 'str'>\n>>> def foo(): pass\n>>>foo.__class__\n<type 'function'>\n>>> class Bar(object): pass\n>>> b = Bar()\n>>> b.__class__\n<class '__main__.Bar'>\n```\n\n\n\n现在，对于任何一个__class__的__class__属性又是什么呢？\n\n```Python\n>>> a.__class__.__class__\n<type 'type'>\n>>> age.__class__.__class__\n<type 'type'>\n>>> foo.__class__.__class__\n<type 'type'>\n>>> b.__class__.__class__\n<type 'type'>\n```\n\n\n\n因此，元类就是创建类这种对象的东西。如果你喜欢的话，可以把元类称为“类工厂”（不要和工厂类搞混了:D） type就是Python的内建元类，当然了，你也可以创建自己的元类。\n\n \n\n## **\\_\\_metaclass__****属性**\n\n你可以在写一个类的时候为其添加\\__metaclass__属性。\n\n```Python\nclass Foo(object):\n\t__metaclass__ = something…\n[…]\n```\n\n\n\n如果你这么做了，Python就会用元类来创建类Foo。小心点，这里面有些技巧。你首先写下class Foo(object)，但是类对象Foo还没有在内存中创建。Python会在类的定义中寻找__metaclass__属性，如果找到了，Python就会用它来创建类Foo，如果没有找到，就会用内建的type来创建这个类。把下面这段话反复读几次。当你写如下代码时 :\n\n```Python\nclass Foo(Bar):\n    pass\n```\n\n\n\nPython做了如下的操作：\n\nFoo中有__metaclass__这个属性吗？如果是，Python会在内存中通过__metaclass__创建一个名字为Foo的类对象（我说的是类对象，请紧跟我的思路）。如果Python没有找到__metaclass__，它会继续在Bar（父类）中寻找__metaclass__属性，并尝试做和前面同样的操作。如果Python在任何父类中都找不到__metaclass__，它就会在模块层次中去寻找__metaclass__，并尝试做同样的操作。如果还是找不到__metaclass__,Python就会用内置的type来创建这个类对象。\n\n现在的问题就是，你可以在__metaclass__中放置些什么代码呢？答案就是：可以创建一个类的东西。那么什么可以用来创建一个类呢？type，或者任何使用到type或者子类化type的东东都可以。\n\n \n\n## **自定义元类**\n\n元类的主要目的就是为了当创建类时能够自动地改变类。通常，你会为API做这样的事情，你希望可以创建符合当前上下文的类。假想一个很傻的例子，你决定在你的模块里所有的类的属性都应该是大写形式。有好几种方法可以办到，但其中一种就是通过在模块级别设定__metaclass__。采用这种方法，这个模块中的所有类都会通过这个元类来创建，我们只需要告诉元类把所有的属性都改成大写形式就万事大吉了。\n\n幸运的是，__metaclass__实际上可以被任意调用，它并不需要是一个正式的类（我知道，某些名字里带有‘class’的东西并不需要是一个class，画画图理解下，这很有帮助）。所以，我们这里就先以一个简单的函数作为例子开始。\n\n```Python\n# 元类会自动将你通常传给‘type’的参数作为自己的参数传入\ndef upper_attr(future_class_name, future_class_parents, future_class_attr):\n    '''返回一个类对象，将属性都转为大写形式'''\n    #  选择所有不以'__'开头的属性\n    attrs = ((name, value) for name, value in future_class_attr.items() if not name.startswith('__'))\n    # 将它们转为大写形式\n    uppercase_attr = dict((name.upper(), value) for name, value in attrs)\n \n    # 通过'type'来做类对象的创建\n    return type(future_class_name, future_class_parents, uppercase_attr)\n \n__metaclass__ = upper_attr  #  这会作用到这个模块中的所有类\n \nclass Foo(object):\n    # 我们也可以只在这里定义__metaclass__，这样就只会作用于这个类中\n    bar = 'bip'\n\nprint hasattr(Foo, 'bar')\n# 输出: False\nprint hasattr(Foo, 'BAR')\n# 输出:True\n \nf = Foo()\nprint f.BAR\n# 输出:'bip'\n```\n\n现在让我们再做一次，这一次用一个真正的class来当做元类。\n\n```Python\n# 请记住，'type'实际上是一个类，就像'str'和'int'一样\n# 所以，你可以从type继承\nclass UpperAttrMetaClass(type):\n    # __new__ 是在__init__之前被调用的特殊方法\n    # __new__是用来创建对象并返回之的方法\n    # 而__init__只是用来将传入的参数初始化给对象\n    # 你很少用到__new__，除非你希望能够控制对象的创建\n    # 这里，创建的对象是类，我们希望能够自定义它，所以我们这里改写__new__\n    # 如果你希望的话，你也可以在__init__中做些事情\n    # 还有一些高级的用法会涉及到改写__call__特殊方法，但是我们这里不用\n    def __new__(upperattr_metaclass, future_class_name, future_class_parents, future_class_attr):\n        attrs = ((name, value) for name, value in future_class_attr.items() if not name.startswith('__'))\n        uppercase_attr = dict((name.upper(), value) for name, value in attrs)\n        return type(future_class_name, future_class_parents, uppercase_attr)\n```\n\n但是，这种方式其实不是OOP。我们直接调用了type，而且我们没有改写父类的__new__方法。现在让我们这样去处理:\n\n```Python\nclass UpperAttrMetaclass(type):\n    def __new__(upperattr_metaclass, future_class_name, future_class_parents, future_class_attr):\n        attrs = ((name, value) for name, value in future_class_attr.items() if not name.startswith('__'))\n        uppercase_attr = dict((name.upper(), value) for name, value in attrs)\n \n        # 复用type.__new__方法\n        # 这就是基本的OOP编程，没什么魔法\n        return type.__new__(upperattr_metaclass, future_class_name, future_class_parents, uppercase_attr)\n```\n\n你可能已经注意到了有个额外的参数upperattr_metaclass，这并没有什么特别的。类方法的第一个参数总是表示当前的实例，就像在普通的类方法中的self参数一样。当然了，为了清晰起见，这里的名字我起的比较长。但是就像self一样，所有的参数都有它们的传统名称。因此，在真实的产品代码中一个元类应该是像这样的：\n\n```Python\nclass UpperAttrMetaclass(type):\n    def __new__(cls, name, bases, dct):\n        attrs = ((name, value) for name, value in dct.items() if not name.startswith('__')\n        uppercase_attr  = dict((name.upper(), value) for name, value in attrs)\n        return type.__new__(cls, name, bases, uppercase_attr)\n```\n\n\n\n如果使用super方法的话，我们还可以使它变得更清晰一些，这会缓解继承（是的，你可以拥有元类，从元类继承，从type继承）\n\n```Python\nclass UpperAttrMetaclass(type):\n    def __new__(cls, name, bases, dct):\n        attrs = ((name, value) for name, value in dct.items() if not name.startswith('__'))\n        uppercase_attr = dict((name.upper(), value) for name, value in attrs)\n        return super(UpperAttrMetaclass, cls).__new__(cls, name, bases, uppercase_attr)\n```\n\n\n\n就是这样，除此之外，关于元类真的没有别的可说的了。使用到元类的代码比较复杂，这背后的原因倒并不是因为元类本身，而是因为你通常会使用元类去做一些晦涩的事情，依赖于自省，控制继承等等。确实，用元类来搞些“黑暗魔法”是特别有用的，因而会搞出些复杂的东西来。但就元类本身而言，它们其实是很简单的：\n\n1)   拦截类的创建\n\n2)   修改类\n\n3)   返回修改之后的类\n\n \n\n## **为什么要用metaclass类而不是函数?**\n\n由于__metaclass__可以接受任何可调用的对象，那为何还要使用类呢，因为很显然使用类会更加复杂啊？这里有好几个原因：\n\n1）  意图会更加清晰。当你读到UpperAttrMetaclass(type)时，你知道接下来要发生什么。\n\n2） 你可以使用OOP编程。元类可以从元类中继承而来，改写父类的方法。元类甚至还可以使用元类。\n\n3）  你可以把代码组织的更好。当你使用元类的时候肯定不会是像我上面举的这种简单场景，通常都是针对比较复杂的问题。将多个方法归总到一个类中会很有帮助，也会使得代码更容易阅读。\n\n4） 你可以使用__new__, __init__以及__call__这样的特殊方法。它们能帮你处理不同的任务。就算通常你可以把所有的东西都在__new__里处理掉，有些人还是觉得用__init__更舒服些。\n\n5） 哇哦，这东西的名字是metaclass，肯定非善类，我要小心！\n\n \n\n## **究竟为什么要使用元类？**\n\n现在回到我们的大主题上来，究竟是为什么你会去使用这样一种容易出错且晦涩的特性？好吧，一般来说，你根本就用不上它：\n\n> “元类就是深度的魔法，99%的用户应该根本不必为此操心。如果你想搞清楚究竟是否需要用到元类，那么你就不需要它。那些实际用到元类的人都非常清楚地知道他们需要做什么，而且根本不需要解释为什么要用元类。”  —— Python界的领袖 Tim Peters\n\n元类的主要用途是创建API。一个典型的例子是Django ORM。它允许你像这样定义：\n\n```Python\nclass Person(models.Model):\n    name = models.CharField(max_length=30)\n    age = models.IntegerField()\n```\n\n\n\n但是如果你像这样做的话：\n\n```Python\nguy  = Person(name='bob', age='35')\nprint guy.age\n```\n\n这并不会返回一个IntegerField对象，而是会返回一个int，甚至可以直接从数据库中取出数据。这是有可能的，因为models.Model定义了__metaclass__， 并且使用了一些魔法能够将你刚刚定义的简单的Person类转变成对数据库的一个复杂hook。Django框架将这些看起来很复杂的东西通过暴露出一个简单的使用元类的API将其化简，通过这个API重新创建代码，在背后完成真正的工作。\n\n \n\n## **结语**\n\n首先，你知道了类其实是能够创建出类实例的对象。好吧，事实上，类本身也是实例，当然，它们是元类的实例。\n\n```Python\n>>>class Foo(object): pass\n>>> id(Foo)\n142630324\n```\n\n\n\nPython中的一切都是对象，它们要么是类的实例，要么是元类的实例，除了type。type实际上是它自己的元类，在纯Python环境中这可不是你能够做到的，这是通过在实现层面耍一些小手段做到的。其次，元类是很复杂的。对于非常简单的类，你可能不希望通过使用元类来对类做修改。你可以通过其他两种技术来修改类：\n\n1） [Monkey patching](http://en.wikipedia.org/wiki/Monkey_patch)\n\n2)   class decorators\n\n当你需要动态修改类时，99%的时间里你最好使用上面这两种技术。当然了，其实在99%的时间里你根本就不需要动态修改类 :D","source":"_posts/深刻理解Python中的元类（metaclass）.md","raw":"---\ntitle: 深刻理解Python中的元类（metaclass）\ndate: 2017-02-06 11:20:36\ntags: Python\n---\n\n这是一篇在[Stack overflow](http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python)上很热的帖子。提问者自称已经掌握了有关Python OOP编程中的各种概念，但始终觉得元类(metaclass)难以理解。他知道这肯定和自省有关，但仍然觉得不太明白，希望大家可以给出一些实际的例子和代码片段以帮助理解，以及在什么情况下需要进行元编程。于是e-satis同学给出了神一般的回复，该回复获得了985点的赞同点数，更有人评论说这段回复应该加入到Python的官方文档中去。而e-satis同学本人在Stack Overflow中的声望积分也高达64271分。以下就是这篇精彩的回复。（提示：非常长）\n\n<!-- more -->\n\n## **类也是对象**\n\n在理解元类之前，你需要先掌握Python中的类。Python中类的概念借鉴于Smalltalk，这显得有些奇特。在大多数编程语言中，类就是一组用来描述如何生成一个对象的代码段。在Python中这一点仍然成立：\n\n```Python\n>>> class ObjectCreator(object):\n…       pass\n…\n>>> my_object = ObjectCreator()\n>>> print my_object\n<__main__.ObjectCreator object at 0x8974f2c>\n```\n\n\n\n但是，Python中的类还远不止如此。类同样也是一种对象。是的，没错，就是对象。只要你使用关键字class，Python解释器在执行的时候就会创建一个对象。下面的代码段：\n\n```Python\n>>> class ObjectCreator(object):\n…       pass\n…\n```\n\n\n\n将在内存中创建一个对象，名字就是ObjectCreator。**这个对象（类）自身拥有创建对象（类实例）的能力，而这就是为什么它是一个类的原因。**但是，它的本质仍然是一个对象，于是乎你可以对它做如下的操作：\n\n1. 你可以将它赋值给一个变量\n2. 你可以拷贝它\n3. 你可以为它增加属性\n4. 你可以将它作为函数参数进行传递\n\n下面是示例：\n\n```Python\n>>> print ObjectCreator     # 你可以打印一个类，因为它其实也是一个对象\n<class '__main__.ObjectCreator'>\n>>> def echo(o):\n…       print o\n…\n>>> echo(ObjectCreator)                 # 你可以将类做为参数传给函数\n<class '__main__.ObjectCreator'>\n>>> print hasattr(ObjectCreator, 'new_attribute')\nFasle\n>>> ObjectCreator.new_attribute = 'foo' #  你可以为类增加属性\n>>> print hasattr(ObjectCreator, 'new_attribute')\nTrue\n>>> print ObjectCreator.new_attribute\nfoo\n>>> ObjectCreatorMirror = ObjectCreator # 你可以将类赋值给一个变量\n>>> print ObjectCreatorMirror()\n<__main__.ObjectCreator object at 0x8997b4c>\n```\n\n\n\n## **动态地创建类**\n\n因为类也是对象，你可以在运行时动态的创建它们，就像其他任何对象一样。首先，你可以在函数中创建类，使用class关键字即可。\n\n```Python\n>>> def choose_class(name):\n…       if name == 'foo':\n…           class Foo(object):\n…               pass\n…           return Foo     # 返回的是类，不是类的实例\n…       else:\n…           class Bar(object):\n…               pass\n…           return Bar\n…\n>>> MyClass = choose_class('foo')\n>>> print MyClass              # 函数返回的是类，不是类的实例\n<class '__main__'.Foo>\n>>> print MyClass()            # 你可以通过这个类创建类实例，也就是对象\n<__main__.Foo object at 0x89c6d4c>\n```\n\n\n\n但这还不够动态，因为你仍然需要自己编写整个类的代码。由于类也是对象，所以它们必须是通过什么东西来生成的才对。当你使用class关键字时，Python解释器自动创建这个对象。但就和Python中的大多数事情一样，Python仍然提供给你手动处理的方法。还记得内建函数type吗？这个古老但强大的函数能够让你知道一个对象的类型是什么，就像这样：\n\n```Python\n>>> print type(1)\n<type 'int'>\n>>> print type(\"1\")\n<type 'str'>\n>>> print type(ObjectCreator)\n<type 'type'>\n>>> print type(ObjectCreator())\n<class '__main__.ObjectCreator'>\n```\n\n\n\n这里，type有一种完全不同的能力，它也能动态的创建类。type可以接受一个类的描述作为参数，然后返回一个类。（我知道，根据传入参数的不同，同一个函数拥有两种完全不同的用法是一件很傻的事情，但这在Python中是为了保持向后兼容性）\n\ntype可以像这样工作：\n\n```Python\ntype(类名, 父类的元组（针对继承的情况，可以为空），包含属性的字典（名称和值）)\n```\n\n\n\n比如下面的代码：\n\n```Python\n\n>>> class MyShinyClass(object):\n…       pass\n```\n\n可以手动像这样创建：\n\n```Python\n>>> MyShinyClass = type('MyShinyClass', (), {})  # 返回一个类对象\n>>> print MyShinyClass\n<class '__main__.MyShinyClass'>\n>>> print MyShinyClass()  #  创建一个该类的实例\n<__main__.MyShinyClass object at 0x8997cec>\n```\n\n你会发现我们使用“MyShinyClass”作为类名，并且也可以把它当做一个变量来作为类的引用。类和变量是不同的，这里没有任何理由把事情弄的复杂。\n\ntype 接受一个字典来为类定义属性，因此\n\n```Python\n>>> class Foo(object):\n…       bar = True\n```\n\n\n\n可以翻译为：\n\n```Python\n>>> Foo = type('Foo', (), {'bar':True})\n```\n\n\n\n并且可以将Foo当成一个普通的类一样使用：\n\n```Python\n>>> print Foo\n<class '__main__.Foo'>\n>>> print Foo.bar\nTrue\n>>> f = Foo()\n>>> print f\n<__main__.Foo object at 0x8a9b84c>\n>>> print f.bar\nTrue\n```\n\n\n\n当然，你可以向这个类继承，所以，如下的代码：\n\n```Python\n>>> class FooChild(Foo):\n…       pass\n```\n\n就可以写成：\n\n```Python\n>>> FooChild = type('FooChild', (Foo,),{})\n>>> print FooChild\n<class '__main__.FooChild'>\n>>> print FooChild.bar   # bar属性是由Foo继承而来\nTrue\n```\n\n\n\n最终你会希望为你的类增加方法。只需要定义一个有着恰当签名的函数并将其作为属性赋值就可以了。\n\n```Python\n>>> def echo_bar(self):\n…       print self.bar\n…\n>>> FooChild = type('FooChild', (Foo,), {'echo_bar': echo_bar})\n>>> hasattr(Foo, 'echo_bar')\nFalse\n>>> hasattr(FooChild, 'echo_bar')\nTrue\n>>> my_foo = FooChild()\n>>> my_foo.echo_bar()\nTrue\n```\n\n\n\n你可以看到，在Python中，类也是对象，你可以动态的创建类。这就是当你使用关键字class时Python在幕后做的事情，而这就是通过元类来实现的。\n\n \n\n## **到底什么是元类（终于到主题了）**\n\n元类就是用来创建类的“东西”。你创建类就是为了创建类的实例对象，不是吗？但是我们已经学习到了Python中的类也是对象。好吧，元类就是用来创建这些类（对象）的，元类就是类的类，你可以这样理解 为：\n\n```Python\nMyClass = MetaClass()\nMyObject = MyClass()\n```\n\n\n\n你已经看到了type可以让你像这样做：\n\n```Python\nMyClass = type('MyClass', (), {})\n```\n\n\n\n这是因为函数type实际上是一个元类。type就是Python在背后用来创建所有类的元类。现在你想知道那为什么type会全部采用小写形式而不是Type呢？好吧，我猜这是为了和str保持一致性，str是用来创建字符串对象的类，而int是用来创建整数对象的类。type就是创建类对象的类。你可以通过检查__class__属性来看到这一点。Python中所有的东西，注意，我是指所有的东西——都是对象。这包括整数、字符串、函数以及类。它们全部都是对象，而且它们都是从一个类创建而来。\n\n```Python\n>>> age = 35\n>>> age.__class__\n<type 'int'>\n>>> name = 'bob'\n>>> name.__class__\n<type 'str'>\n>>> def foo(): pass\n>>>foo.__class__\n<type 'function'>\n>>> class Bar(object): pass\n>>> b = Bar()\n>>> b.__class__\n<class '__main__.Bar'>\n```\n\n\n\n现在，对于任何一个__class__的__class__属性又是什么呢？\n\n```Python\n>>> a.__class__.__class__\n<type 'type'>\n>>> age.__class__.__class__\n<type 'type'>\n>>> foo.__class__.__class__\n<type 'type'>\n>>> b.__class__.__class__\n<type 'type'>\n```\n\n\n\n因此，元类就是创建类这种对象的东西。如果你喜欢的话，可以把元类称为“类工厂”（不要和工厂类搞混了:D） type就是Python的内建元类，当然了，你也可以创建自己的元类。\n\n \n\n## **\\_\\_metaclass__****属性**\n\n你可以在写一个类的时候为其添加\\__metaclass__属性。\n\n```Python\nclass Foo(object):\n\t__metaclass__ = something…\n[…]\n```\n\n\n\n如果你这么做了，Python就会用元类来创建类Foo。小心点，这里面有些技巧。你首先写下class Foo(object)，但是类对象Foo还没有在内存中创建。Python会在类的定义中寻找__metaclass__属性，如果找到了，Python就会用它来创建类Foo，如果没有找到，就会用内建的type来创建这个类。把下面这段话反复读几次。当你写如下代码时 :\n\n```Python\nclass Foo(Bar):\n    pass\n```\n\n\n\nPython做了如下的操作：\n\nFoo中有__metaclass__这个属性吗？如果是，Python会在内存中通过__metaclass__创建一个名字为Foo的类对象（我说的是类对象，请紧跟我的思路）。如果Python没有找到__metaclass__，它会继续在Bar（父类）中寻找__metaclass__属性，并尝试做和前面同样的操作。如果Python在任何父类中都找不到__metaclass__，它就会在模块层次中去寻找__metaclass__，并尝试做同样的操作。如果还是找不到__metaclass__,Python就会用内置的type来创建这个类对象。\n\n现在的问题就是，你可以在__metaclass__中放置些什么代码呢？答案就是：可以创建一个类的东西。那么什么可以用来创建一个类呢？type，或者任何使用到type或者子类化type的东东都可以。\n\n \n\n## **自定义元类**\n\n元类的主要目的就是为了当创建类时能够自动地改变类。通常，你会为API做这样的事情，你希望可以创建符合当前上下文的类。假想一个很傻的例子，你决定在你的模块里所有的类的属性都应该是大写形式。有好几种方法可以办到，但其中一种就是通过在模块级别设定__metaclass__。采用这种方法，这个模块中的所有类都会通过这个元类来创建，我们只需要告诉元类把所有的属性都改成大写形式就万事大吉了。\n\n幸运的是，__metaclass__实际上可以被任意调用，它并不需要是一个正式的类（我知道，某些名字里带有‘class’的东西并不需要是一个class，画画图理解下，这很有帮助）。所以，我们这里就先以一个简单的函数作为例子开始。\n\n```Python\n# 元类会自动将你通常传给‘type’的参数作为自己的参数传入\ndef upper_attr(future_class_name, future_class_parents, future_class_attr):\n    '''返回一个类对象，将属性都转为大写形式'''\n    #  选择所有不以'__'开头的属性\n    attrs = ((name, value) for name, value in future_class_attr.items() if not name.startswith('__'))\n    # 将它们转为大写形式\n    uppercase_attr = dict((name.upper(), value) for name, value in attrs)\n \n    # 通过'type'来做类对象的创建\n    return type(future_class_name, future_class_parents, uppercase_attr)\n \n__metaclass__ = upper_attr  #  这会作用到这个模块中的所有类\n \nclass Foo(object):\n    # 我们也可以只在这里定义__metaclass__，这样就只会作用于这个类中\n    bar = 'bip'\n\nprint hasattr(Foo, 'bar')\n# 输出: False\nprint hasattr(Foo, 'BAR')\n# 输出:True\n \nf = Foo()\nprint f.BAR\n# 输出:'bip'\n```\n\n现在让我们再做一次，这一次用一个真正的class来当做元类。\n\n```Python\n# 请记住，'type'实际上是一个类，就像'str'和'int'一样\n# 所以，你可以从type继承\nclass UpperAttrMetaClass(type):\n    # __new__ 是在__init__之前被调用的特殊方法\n    # __new__是用来创建对象并返回之的方法\n    # 而__init__只是用来将传入的参数初始化给对象\n    # 你很少用到__new__，除非你希望能够控制对象的创建\n    # 这里，创建的对象是类，我们希望能够自定义它，所以我们这里改写__new__\n    # 如果你希望的话，你也可以在__init__中做些事情\n    # 还有一些高级的用法会涉及到改写__call__特殊方法，但是我们这里不用\n    def __new__(upperattr_metaclass, future_class_name, future_class_parents, future_class_attr):\n        attrs = ((name, value) for name, value in future_class_attr.items() if not name.startswith('__'))\n        uppercase_attr = dict((name.upper(), value) for name, value in attrs)\n        return type(future_class_name, future_class_parents, uppercase_attr)\n```\n\n但是，这种方式其实不是OOP。我们直接调用了type，而且我们没有改写父类的__new__方法。现在让我们这样去处理:\n\n```Python\nclass UpperAttrMetaclass(type):\n    def __new__(upperattr_metaclass, future_class_name, future_class_parents, future_class_attr):\n        attrs = ((name, value) for name, value in future_class_attr.items() if not name.startswith('__'))\n        uppercase_attr = dict((name.upper(), value) for name, value in attrs)\n \n        # 复用type.__new__方法\n        # 这就是基本的OOP编程，没什么魔法\n        return type.__new__(upperattr_metaclass, future_class_name, future_class_parents, uppercase_attr)\n```\n\n你可能已经注意到了有个额外的参数upperattr_metaclass，这并没有什么特别的。类方法的第一个参数总是表示当前的实例，就像在普通的类方法中的self参数一样。当然了，为了清晰起见，这里的名字我起的比较长。但是就像self一样，所有的参数都有它们的传统名称。因此，在真实的产品代码中一个元类应该是像这样的：\n\n```Python\nclass UpperAttrMetaclass(type):\n    def __new__(cls, name, bases, dct):\n        attrs = ((name, value) for name, value in dct.items() if not name.startswith('__')\n        uppercase_attr  = dict((name.upper(), value) for name, value in attrs)\n        return type.__new__(cls, name, bases, uppercase_attr)\n```\n\n\n\n如果使用super方法的话，我们还可以使它变得更清晰一些，这会缓解继承（是的，你可以拥有元类，从元类继承，从type继承）\n\n```Python\nclass UpperAttrMetaclass(type):\n    def __new__(cls, name, bases, dct):\n        attrs = ((name, value) for name, value in dct.items() if not name.startswith('__'))\n        uppercase_attr = dict((name.upper(), value) for name, value in attrs)\n        return super(UpperAttrMetaclass, cls).__new__(cls, name, bases, uppercase_attr)\n```\n\n\n\n就是这样，除此之外，关于元类真的没有别的可说的了。使用到元类的代码比较复杂，这背后的原因倒并不是因为元类本身，而是因为你通常会使用元类去做一些晦涩的事情，依赖于自省，控制继承等等。确实，用元类来搞些“黑暗魔法”是特别有用的，因而会搞出些复杂的东西来。但就元类本身而言，它们其实是很简单的：\n\n1)   拦截类的创建\n\n2)   修改类\n\n3)   返回修改之后的类\n\n \n\n## **为什么要用metaclass类而不是函数?**\n\n由于__metaclass__可以接受任何可调用的对象，那为何还要使用类呢，因为很显然使用类会更加复杂啊？这里有好几个原因：\n\n1）  意图会更加清晰。当你读到UpperAttrMetaclass(type)时，你知道接下来要发生什么。\n\n2） 你可以使用OOP编程。元类可以从元类中继承而来，改写父类的方法。元类甚至还可以使用元类。\n\n3）  你可以把代码组织的更好。当你使用元类的时候肯定不会是像我上面举的这种简单场景，通常都是针对比较复杂的问题。将多个方法归总到一个类中会很有帮助，也会使得代码更容易阅读。\n\n4） 你可以使用__new__, __init__以及__call__这样的特殊方法。它们能帮你处理不同的任务。就算通常你可以把所有的东西都在__new__里处理掉，有些人还是觉得用__init__更舒服些。\n\n5） 哇哦，这东西的名字是metaclass，肯定非善类，我要小心！\n\n \n\n## **究竟为什么要使用元类？**\n\n现在回到我们的大主题上来，究竟是为什么你会去使用这样一种容易出错且晦涩的特性？好吧，一般来说，你根本就用不上它：\n\n> “元类就是深度的魔法，99%的用户应该根本不必为此操心。如果你想搞清楚究竟是否需要用到元类，那么你就不需要它。那些实际用到元类的人都非常清楚地知道他们需要做什么，而且根本不需要解释为什么要用元类。”  —— Python界的领袖 Tim Peters\n\n元类的主要用途是创建API。一个典型的例子是Django ORM。它允许你像这样定义：\n\n```Python\nclass Person(models.Model):\n    name = models.CharField(max_length=30)\n    age = models.IntegerField()\n```\n\n\n\n但是如果你像这样做的话：\n\n```Python\nguy  = Person(name='bob', age='35')\nprint guy.age\n```\n\n这并不会返回一个IntegerField对象，而是会返回一个int，甚至可以直接从数据库中取出数据。这是有可能的，因为models.Model定义了__metaclass__， 并且使用了一些魔法能够将你刚刚定义的简单的Person类转变成对数据库的一个复杂hook。Django框架将这些看起来很复杂的东西通过暴露出一个简单的使用元类的API将其化简，通过这个API重新创建代码，在背后完成真正的工作。\n\n \n\n## **结语**\n\n首先，你知道了类其实是能够创建出类实例的对象。好吧，事实上，类本身也是实例，当然，它们是元类的实例。\n\n```Python\n>>>class Foo(object): pass\n>>> id(Foo)\n142630324\n```\n\n\n\nPython中的一切都是对象，它们要么是类的实例，要么是元类的实例，除了type。type实际上是它自己的元类，在纯Python环境中这可不是你能够做到的，这是通过在实现层面耍一些小手段做到的。其次，元类是很复杂的。对于非常简单的类，你可能不希望通过使用元类来对类做修改。你可以通过其他两种技术来修改类：\n\n1） [Monkey patching](http://en.wikipedia.org/wiki/Monkey_patch)\n\n2)   class decorators\n\n当你需要动态修改类时，99%的时间里你最好使用上面这两种技术。当然了，其实在99%的时间里你根本就不需要动态修改类 :D","slug":"深刻理解Python中的元类（metaclass）","published":1,"updated":"2017-04-15T10:32:29.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1j873jt001j7koecjckvcag"},{"title":"解决Python在Windows环境运行时的编码问题","date":"2017-02-04T10:22:51.000Z","_content":"\n这是我之前在Python开发时候遇到的小问题，以前不太懂，后来想明白了。再后来发现好像也有很多人不知道，老说什么Windows环境Python开发非常不好用，麻烦。我跟你讲，不好用那都是骗人的，操作系统不背这个锅。~~虽然我现在还是放弃了windos~~\n\n<!-- more -->\n\n### 环境\n\n- Windows 10\n- Python 2.7\n\n\n\n### 调教过程\n\n良好的开发环境就跟养儿子一样，从出生的时候就是要开始好好调教了。\n\n总结了一下以前在Windows环境下进行Python开发的时候常见体验不好的地方：\n\n1. 汉字乱码\n2. Django莫名其妙报错\n3. 安装第三方包困难\n4. ...\n\n基本上这些问题可以分为两大类：\n\n1. 权限问题\n2. 编码问题\n\n#### 权限问题解决\n\n在使用命令行（cmd）安装东西的时候，一定要使用管理员身份打开cmd。\n\n负责安装上也会由于各种问题无法正常运行（例如Django）\n\n#### 编码问题解决\n\n编码问题解决有两种办法：\n\n一个解决的方案在程序中加入以下代码： Python代码\n\n```python\nimport sys  \nreload(sys)  \nsys.setdefaultencoding('utf8')\n```\n\n另一个方案是我大力推荐，一劳永逸的办法：\n\n在python的`Lib\\site-packages`文件夹下新建一个`sitecustomize.py`，内容为：\n\n```python\n# encoding=utf8  \nimport sys  \n  \nreload(sys)  \nsys.setdefaultencoding('utf8')\n```\n\n此时重启python解释器，执行sys.getdefaultencoding()，发现编码已经被设置为utf8的了，多次重启之后，效果相同，这是因为系统在python启动的时候，自行调用该文件，设置系统的默认编码，而不需要每次都手动的加上解决代码。\n\n\n\n---\n\n只要按照上面的方法进行设置，Windows环境下Python开发感受会提升非常的大。","source":"_posts/解决Python在Windows环境运行时的编码问题.md","raw":"---\ntitle: 解决Python在Windows环境运行时的编码问题\ndate: 2017-02-04 18:22:51\ntags: Python\n---\n\n这是我之前在Python开发时候遇到的小问题，以前不太懂，后来想明白了。再后来发现好像也有很多人不知道，老说什么Windows环境Python开发非常不好用，麻烦。我跟你讲，不好用那都是骗人的，操作系统不背这个锅。~~虽然我现在还是放弃了windos~~\n\n<!-- more -->\n\n### 环境\n\n- Windows 10\n- Python 2.7\n\n\n\n### 调教过程\n\n良好的开发环境就跟养儿子一样，从出生的时候就是要开始好好调教了。\n\n总结了一下以前在Windows环境下进行Python开发的时候常见体验不好的地方：\n\n1. 汉字乱码\n2. Django莫名其妙报错\n3. 安装第三方包困难\n4. ...\n\n基本上这些问题可以分为两大类：\n\n1. 权限问题\n2. 编码问题\n\n#### 权限问题解决\n\n在使用命令行（cmd）安装东西的时候，一定要使用管理员身份打开cmd。\n\n负责安装上也会由于各种问题无法正常运行（例如Django）\n\n#### 编码问题解决\n\n编码问题解决有两种办法：\n\n一个解决的方案在程序中加入以下代码： Python代码\n\n```python\nimport sys  \nreload(sys)  \nsys.setdefaultencoding('utf8')\n```\n\n另一个方案是我大力推荐，一劳永逸的办法：\n\n在python的`Lib\\site-packages`文件夹下新建一个`sitecustomize.py`，内容为：\n\n```python\n# encoding=utf8  \nimport sys  \n  \nreload(sys)  \nsys.setdefaultencoding('utf8')\n```\n\n此时重启python解释器，执行sys.getdefaultencoding()，发现编码已经被设置为utf8的了，多次重启之后，效果相同，这是因为系统在python启动的时候，自行调用该文件，设置系统的默认编码，而不需要每次都手动的加上解决代码。\n\n\n\n---\n\n只要按照上面的方法进行设置，Windows环境下Python开发感受会提升非常的大。","slug":"解决Python在Windows环境运行时的编码问题","published":1,"updated":"2017-04-15T10:32:29.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1j873jz001l7koe8jzjq71j"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj1j873c100097koeoh409ky5","tag_id":"cj1j873bq00047koervuafmtj","_id":"cj1j873c5000c7koed1kaj03c"},{"post_id":"cj1j873b500017koer64ftqwg","tag_id":"cj1j873bq00047koervuafmtj","_id":"cj1j873c8000e7koequzpxpdd"},{"post_id":"cj1j873b500017koer64ftqwg","tag_id":"cj1j873c000087koe621yr6je","_id":"cj1j873cc000h7koera1a1cz1"},{"post_id":"cj1j873bl00037koez2uwty2l","tag_id":"cj1j873bq00047koervuafmtj","_id":"cj1j873cj000m7koe3eof136g"},{"post_id":"cj1j873bl00037koez2uwty2l","tag_id":"cj1j873cb000g7koeyys4acnz","_id":"cj1j873cn000o7koec59dkzhm"},{"post_id":"cj1j873bt00057koehaawbyri","tag_id":"cj1j873bq00047koervuafmtj","_id":"cj1j873cq000r7koepw6jgksb"},{"post_id":"cj1j873cp000q7koetuvlylfk","tag_id":"cj1j873cb000g7koeyys4acnz","_id":"cj1j873cr000s7koe5jag409d"},{"post_id":"cj1j873bw00067koeqcik5zy4","tag_id":"cj1j873co000p7koez7yyqtk4","_id":"cj1j873ct000w7koe0vl8i6t0"},{"post_id":"cj1j873bw00067koeqcik5zy4","tag_id":"cj1j873cr000t7koealz8bn68","_id":"cj1j873ct000x7koeugol59j8"},{"post_id":"cj1j873bw00067koeqcik5zy4","tag_id":"cj1j873cs000u7koe78k9k388","_id":"cj1j873cu000z7koe1zreeb21"},{"post_id":"cj1j873bx00077koe9a8u6otb","tag_id":"cj1j873cb000g7koeyys4acnz","_id":"cj1j873cv00107koehbpmk8r8"},{"post_id":"cj1j873c3000a7koeoy9artdc","tag_id":"cj1j873cu000y7koexhsyjiuq","_id":"cj1j873cy00137koei2v14sg9"},{"post_id":"cj1j873c3000a7koeoy9artdc","tag_id":"cj1j873cv00117koemuf68mok","_id":"cj1j873cy00147koeps7v957m"},{"post_id":"cj1j873c6000d7koe48l8yhyg","tag_id":"cj1j873cw00127koe4diz6no3","_id":"cj1j873d000167koezjw69yfq"},{"post_id":"cj1j873ca000f7koedwh05qg2","tag_id":"cj1j873cb000g7koeyys4acnz","_id":"cj1j873d200187koe0mzw0dot"},{"post_id":"cj1j873cc000i7koerh9p0oxe","tag_id":"cj1j873d000177koeelsv0isp","_id":"cj1j873d3001a7koeguie24z9"},{"post_id":"cj1j873ce000j7koe6xzl99n7","tag_id":"cj1j873d200197koe5fq3p8xb","_id":"cj1j873d5001d7koetp6hu6ga"},{"post_id":"cj1j873ce000j7koe6xzl99n7","tag_id":"cj1j873d4001b7koe6ms3oh9q","_id":"cj1j873d6001e7koe2wqw026v"},{"post_id":"cj1j873ci000l7koetzyngmir","tag_id":"cj1j873d5001c7koeldj23scc","_id":"cj1j873d7001g7koe16jje6fe"},{"post_id":"cj1j873cl000n7koeg670j1wy","tag_id":"cj1j873cb000g7koeyys4acnz","_id":"cj1j873d7001h7koeq0nzl6ei"},{"post_id":"cj1j873cl000n7koeg670j1wy","tag_id":"cj1j873d6001f7koeha10lujk","_id":"cj1j873d8001i7koe8xso8bje"},{"post_id":"cj1j873jt001j7koecjckvcag","tag_id":"cj1j873cb000g7koeyys4acnz","_id":"cj1j873k6001m7koeunv5mztx"},{"post_id":"cj1j873jz001l7koe8jzjq71j","tag_id":"cj1j873cb000g7koeyys4acnz","_id":"cj1j873k7001n7koeotbvsi0a"}],"Tag":[{"name":"Golang","_id":"cj1j873bq00047koervuafmtj"},{"name":"Revel","_id":"cj1j873c000087koe621yr6je"},{"name":"Python","_id":"cj1j873cb000g7koeyys4acnz"},{"name":"Django","_id":"cj1j873co000p7koez7yyqtk4"},{"name":"python","_id":"cj1j873cr000t7koealz8bn68"},{"name":"GJY特别教程","_id":"cj1j873cs000u7koe78k9k388"},{"name":"Http协议","_id":"cj1j873cu000y7koexhsyjiuq"},{"name":"爬虫","_id":"cj1j873cv00117koemuf68mok"},{"name":"MySQL","_id":"cj1j873cw00127koe4diz6no3"},{"name":"Hexo","_id":"cj1j873d000177koeelsv0isp"},{"name":"博客相关","_id":"cj1j873d200197koe5fq3p8xb"},{"name":"hexo","_id":"cj1j873d4001b7koe6ms3oh9q"},{"name":"博客通知","_id":"cj1j873d5001c7koeldj23scc"},{"name":"Shell","_id":"cj1j873d6001f7koeha10lujk"}]}}